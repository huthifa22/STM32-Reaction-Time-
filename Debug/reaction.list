
reaction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004298  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004428  08004428  00005428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800457c  0800457c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  0800457c  0800457c  0000557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004584  08004584  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004584  08004584  00005584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004588  08004588  00005588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800458c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000550  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b8  200005b8  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a90a  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f18  00000000  00000000  000109a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  000128c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069f  00000000  00000000  000131c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223dd  00000000  00000000  0001385f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b52b  00000000  00000000  00035c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caa49  00000000  00000000  00041167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010bbb0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e74  00000000  00000000  0010bbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000097  00000000  00000000  0010ea68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004410 	.word	0x08004410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004410 	.word	0x08004410

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_Init>:
#include "stm32f4xx_hal.h"
#include <stdlib.h>
#include <time.h>
#include "stdio.h"

void GPIO_Init(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	2300      	movs	r3, #0
 8000278:	603b      	str	r3, [r7, #0]
 800027a:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <GPIO_Init+0x68>)
 800027c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027e:	4a16      	ldr	r2, [pc, #88]	@ (80002d8 <GPIO_Init+0x68>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6313      	str	r3, [r2, #48]	@ 0x30
 8000286:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <GPIO_Init+0x68>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]

    // PA1, PA3, PA5 as output
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_5;
 80002a0:	232a      	movs	r3, #42	@ 0x2a
 80002a2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4619      	mov	r1, r3
 80002b4:	4809      	ldr	r0, [pc, #36]	@ (80002dc <GPIO_Init+0x6c>)
 80002b6:	f000 fc2d 	bl	8000b14 <HAL_GPIO_Init>

    // PA0 as input joystick button
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002ba:	2301      	movs	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	4804      	ldr	r0, [pc, #16]	@ (80002dc <GPIO_Init+0x6c>)
 80002cc:	f000 fc22 	bl	8000b14 <HAL_GPIO_Init>
}
 80002d0:	bf00      	nop
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000

080002e0 <Toggle_LED>:

void Toggle_LED(uint16_t GPIO_Pin) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(GPIOA, GPIO_Pin);
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	4619      	mov	r1, r3
 80002ee:	4803      	ldr	r0, [pc, #12]	@ (80002fc <Toggle_LED+0x1c>)
 80002f0:	f000 fddd 	bl	8000eae <HAL_GPIO_TogglePin>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40020000 	.word	0x40020000

08000300 <Turn_Off_LED>:

void Turn_Off_LED(uint16_t GPIO_Pin) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOA, GPIO_Pin, GPIO_PIN_RESET);
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	2200      	movs	r2, #0
 800030e:	4619      	mov	r1, r3
 8000310:	4803      	ldr	r0, [pc, #12]	@ (8000320 <Turn_Off_LED+0x20>)
 8000312:	f000 fdb3 	bl	8000e7c <HAL_GPIO_WritePin>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40020000 	.word	0x40020000

08000324 <intro>:
void intro(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	e026      	b.n	800037e <intro+0x5a>
        // Blink red LED
        Toggle_LED(GPIO_PIN_1);
 8000330:	2002      	movs	r0, #2
 8000332:	f7ff ffd5 	bl	80002e0 <Toggle_LED>
        HAL_Delay(150);
 8000336:	2096      	movs	r0, #150	@ 0x96
 8000338:	f000 fae2 	bl	8000900 <HAL_Delay>
        Toggle_LED(GPIO_PIN_1);
 800033c:	2002      	movs	r0, #2
 800033e:	f7ff ffcf 	bl	80002e0 <Toggle_LED>

        // Blink yellow LED
        HAL_Delay(150);
 8000342:	2096      	movs	r0, #150	@ 0x96
 8000344:	f000 fadc 	bl	8000900 <HAL_Delay>
        Toggle_LED(GPIO_PIN_3);
 8000348:	2008      	movs	r0, #8
 800034a:	f7ff ffc9 	bl	80002e0 <Toggle_LED>
        HAL_Delay(150);
 800034e:	2096      	movs	r0, #150	@ 0x96
 8000350:	f000 fad6 	bl	8000900 <HAL_Delay>
        Toggle_LED(GPIO_PIN_3);
 8000354:	2008      	movs	r0, #8
 8000356:	f7ff ffc3 	bl	80002e0 <Toggle_LED>

        // Blink green LED
        HAL_Delay(150);
 800035a:	2096      	movs	r0, #150	@ 0x96
 800035c:	f000 fad0 	bl	8000900 <HAL_Delay>
        Toggle_LED(GPIO_PIN_5);
 8000360:	2020      	movs	r0, #32
 8000362:	f7ff ffbd 	bl	80002e0 <Toggle_LED>
        HAL_Delay(150);
 8000366:	2096      	movs	r0, #150	@ 0x96
 8000368:	f000 faca 	bl	8000900 <HAL_Delay>
        Toggle_LED(GPIO_PIN_5);
 800036c:	2020      	movs	r0, #32
 800036e:	f7ff ffb7 	bl	80002e0 <Toggle_LED>

        HAL_Delay(150);
 8000372:	2096      	movs	r0, #150	@ 0x96
 8000374:	f000 fac4 	bl	8000900 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b02      	cmp	r3, #2
 8000382:	ddd5      	ble.n	8000330 <intro+0xc>
    }
}
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <Blink_LED>:
void Blink_LED(uint16_t GPIO_Pin, int times, int delay) {
 800038e:	b580      	push	{r7, lr}
 8000390:	b086      	sub	sp, #24
 8000392:	af00      	add	r7, sp, #0
 8000394:	4603      	mov	r3, r0
 8000396:	60b9      	str	r1, [r7, #8]
 8000398:	607a      	str	r2, [r7, #4]
 800039a:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < times; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	e012      	b.n	80003c8 <Blink_LED+0x3a>
        Toggle_LED(GPIO_Pin);
 80003a2:	89fb      	ldrh	r3, [r7, #14]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff9b 	bl	80002e0 <Toggle_LED>
        HAL_Delay(delay);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 faa7 	bl	8000900 <HAL_Delay>
        Toggle_LED(GPIO_Pin);
 80003b2:	89fb      	ldrh	r3, [r7, #14]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff93 	bl	80002e0 <Toggle_LED>
        HAL_Delay(delay);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fa9f 	bl	8000900 <HAL_Delay>
    for (int i = 0; i < times; i++) {
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	dbe8      	blt.n	80003a2 <Blink_LED+0x14>
    }
}
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	3718      	adds	r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <main>:

int main(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
    HAL_Init();
 80003e2:	f000 fa1b 	bl	800081c <HAL_Init>
    GPIO_Init();
 80003e6:	f7ff ff43 	bl	8000270 <GPIO_Init>

    uint32_t start_time, end_time, elapsed_time;

    srand(time(NULL));
 80003ea:	2000      	movs	r0, #0
 80003ec:	f003 fa90 	bl	8003910 <time>
 80003f0:	4602      	mov	r2, r0
 80003f2:	460b      	mov	r3, r1
 80003f4:	4613      	mov	r3, r2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 f80c 	bl	8003414 <srand>

    while (1) {
    	intro();
 80003fc:	f7ff ff92 	bl	8000324 <intro>

        // Red LED
        HAL_Delay(1000);
 8000400:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000404:	f000 fa7c 	bl	8000900 <HAL_Delay>
        Toggle_LED(GPIO_PIN_1);
 8000408:	2002      	movs	r0, #2
 800040a:	f7ff ff69 	bl	80002e0 <Toggle_LED>
        HAL_Delay(2000);
 800040e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000412:	f000 fa75 	bl	8000900 <HAL_Delay>

        // Yellow LED
        Toggle_LED(GPIO_PIN_3);
 8000416:	2008      	movs	r0, #8
 8000418:	f7ff ff62 	bl	80002e0 <Toggle_LED>

        //Random delay between 1 and 6 seconds for green
        int random_delay = (rand() % 6 + 1) * 1000;
 800041c:	f003 f828 	bl	8003470 <rand>
 8000420:	4601      	mov	r1, r0
 8000422:	4b44      	ldr	r3, [pc, #272]	@ (8000534 <main+0x158>)
 8000424:	fb83 3201 	smull	r3, r2, r3, r1
 8000428:	17cb      	asrs	r3, r1, #31
 800042a:	1ad2      	subs	r2, r2, r3
 800042c:	4613      	mov	r3, r2
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	4413      	add	r3, r2
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	1aca      	subs	r2, r1, r3
 8000436:	1c53      	adds	r3, r2, #1
 8000438:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800043c:	fb02 f303 	mul.w	r3, r2, r3
 8000440:	60fb      	str	r3, [r7, #12]
        HAL_Delay(random_delay);
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fa5b 	bl	8000900 <HAL_Delay>

        //Green LED
        Toggle_LED(GPIO_PIN_5);
 800044a:	2020      	movs	r0, #32
 800044c:	f7ff ff48 	bl	80002e0 <Toggle_LED>

        start_time = HAL_GetTick();
 8000450:	f000 fa4a 	bl	80008e8 <HAL_GetTick>
 8000454:	60b8      	str	r0, [r7, #8]

        // Wait for joystick button press
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
 8000456:	bf00      	nop
 8000458:	2101      	movs	r1, #1
 800045a:	4837      	ldr	r0, [pc, #220]	@ (8000538 <main+0x15c>)
 800045c:	f000 fcf6 	bl	8000e4c <HAL_GPIO_ReadPin>
 8000460:	4603      	mov	r3, r0
 8000462:	2b01      	cmp	r3, #1
 8000464:	d0f8      	beq.n	8000458 <main+0x7c>

        // Debounce Control
        HAL_Delay(50);
 8000466:	2032      	movs	r0, #50	@ 0x32
 8000468:	f000 fa4a 	bl	8000900 <HAL_Delay>

        // Wait until button is released
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);
 800046c:	bf00      	nop
 800046e:	2101      	movs	r1, #1
 8000470:	4831      	ldr	r0, [pc, #196]	@ (8000538 <main+0x15c>)
 8000472:	f000 fceb 	bl	8000e4c <HAL_GPIO_ReadPin>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0f8      	beq.n	800046e <main+0x92>

        end_time = HAL_GetTick();
 800047c:	f000 fa34 	bl	80008e8 <HAL_GetTick>
 8000480:	6078      	str	r0, [r7, #4]

        //Subtract Debounce delay
        elapsed_time = end_time - start_time - 50;
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	3b32      	subs	r3, #50	@ 0x32
 800048a:	603b      	str	r3, [r7, #0]
        printf("Your Reaction Time: %lu ms\n", elapsed_time);
 800048c:	6839      	ldr	r1, [r7, #0]
 800048e:	482b      	ldr	r0, [pc, #172]	@ (800053c <main+0x160>)
 8000490:	f003 f8ee 	bl	8003670 <iprintf>

        Turn_Off_LED(GPIO_PIN_1);
 8000494:	2002      	movs	r0, #2
 8000496:	f7ff ff33 	bl	8000300 <Turn_Off_LED>
        Turn_Off_LED(GPIO_PIN_3);
 800049a:	2008      	movs	r0, #8
 800049c:	f7ff ff30 	bl	8000300 <Turn_Off_LED>
        Turn_Off_LED(GPIO_PIN_5);
 80004a0:	2020      	movs	r0, #32
 80004a2:	f7ff ff2d 	bl	8000300 <Turn_Off_LED>

        HAL_Delay(500);
 80004a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004aa:	f000 fa29 	bl	8000900 <HAL_Delay>

        if (elapsed_time < 110) {
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2b6d      	cmp	r3, #109	@ 0x6d
 80004b2:	d808      	bhi.n	80004c6 <main+0xea>
            printf("Reaction: Insane\n");
 80004b4:	4822      	ldr	r0, [pc, #136]	@ (8000540 <main+0x164>)
 80004b6:	f003 f943 	bl	8003740 <puts>
            Blink_LED(GPIO_PIN_5, 10, 200);
 80004ba:	22c8      	movs	r2, #200	@ 0xc8
 80004bc:	210a      	movs	r1, #10
 80004be:	2020      	movs	r0, #32
 80004c0:	f7ff ff65 	bl	800038e <Blink_LED>
 80004c4:	e030      	b.n	8000528 <main+0x14c>
        } else if (elapsed_time < 180) {
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	2bb3      	cmp	r3, #179	@ 0xb3
 80004ca:	d809      	bhi.n	80004e0 <main+0x104>
            printf("Reaction: Fast\n");
 80004cc:	481d      	ldr	r0, [pc, #116]	@ (8000544 <main+0x168>)
 80004ce:	f003 f937 	bl	8003740 <puts>
            Blink_LED(GPIO_PIN_5, 5, 300);
 80004d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80004d6:	2105      	movs	r1, #5
 80004d8:	2020      	movs	r0, #32
 80004da:	f7ff ff58 	bl	800038e <Blink_LED>
 80004de:	e023      	b.n	8000528 <main+0x14c>
        } else if (elapsed_time < 300) {
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80004e6:	d209      	bcs.n	80004fc <main+0x120>
            printf("Reaction: Average\n");
 80004e8:	4817      	ldr	r0, [pc, #92]	@ (8000548 <main+0x16c>)
 80004ea:	f003 f929 	bl	8003740 <puts>
            Blink_LED(GPIO_PIN_3, 5, 400);
 80004ee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80004f2:	2105      	movs	r1, #5
 80004f4:	2008      	movs	r0, #8
 80004f6:	f7ff ff4a 	bl	800038e <Blink_LED>
 80004fa:	e015      	b.n	8000528 <main+0x14c>
        } else if (elapsed_time < 400) {
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000502:	d209      	bcs.n	8000518 <main+0x13c>
            printf("Reaction: Slow\n");
 8000504:	4811      	ldr	r0, [pc, #68]	@ (800054c <main+0x170>)
 8000506:	f003 f91b 	bl	8003740 <puts>
            Blink_LED(GPIO_PIN_1, 5, 300);
 800050a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800050e:	2105      	movs	r1, #5
 8000510:	2002      	movs	r0, #2
 8000512:	f7ff ff3c 	bl	800038e <Blink_LED>
 8000516:	e007      	b.n	8000528 <main+0x14c>
        } else {
            printf("Reaction: Turtle\n");
 8000518:	480d      	ldr	r0, [pc, #52]	@ (8000550 <main+0x174>)
 800051a:	f003 f911 	bl	8003740 <puts>
            Blink_LED(GPIO_PIN_1, 10, 200);
 800051e:	22c8      	movs	r2, #200	@ 0xc8
 8000520:	210a      	movs	r1, #10
 8000522:	2002      	movs	r0, #2
 8000524:	f7ff ff33 	bl	800038e <Blink_LED>
        }
        HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052c:	f000 f9e8 	bl	8000900 <HAL_Delay>
    while (1) {
 8000530:	e764      	b.n	80003fc <main+0x20>
 8000532:	bf00      	nop
 8000534:	2aaaaaab 	.word	0x2aaaaaab
 8000538:	40020000 	.word	0x40020000
 800053c:	08004428 	.word	0x08004428
 8000540:	08004444 	.word	0x08004444
 8000544:	08004458 	.word	0x08004458
 8000548:	08004468 	.word	0x08004468
 800054c:	0800447c 	.word	0x0800447c
 8000550:	0800448c 	.word	0x0800448c

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <HAL_MspInit+0x4c>)
 8000560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000562:	4a0f      	ldr	r2, [pc, #60]	@ (80005a0 <HAL_MspInit+0x4c>)
 8000564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000568:	6453      	str	r3, [r2, #68]	@ 0x44
 800056a:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <HAL_MspInit+0x4c>)
 800056c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800056e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <HAL_MspInit+0x4c>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057e:	4a08      	ldr	r2, [pc, #32]	@ (80005a0 <HAL_MspInit+0x4c>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000584:	6413      	str	r3, [r2, #64]	@ 0x40
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <HAL_MspInit+0x4c>)
 8000588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000592:	2007      	movs	r0, #7
 8000594:	f000 fa8a 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023800 	.word	0x40023800

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <NMI_Handler+0x4>

080005ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <MemManage_Handler+0x4>

080005bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <BusFault_Handler+0x4>

080005c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <UsageFault_Handler+0x4>

080005cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fa:	f000 f961 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <OTG_FS_IRQHandler+0x10>)
 800060a:	f000 fc6a 	bl	8000ee2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c

08000618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return 1;
 800061c:	2301      	movs	r3, #1
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <_kill>:

int _kill(int pid, int sig)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000632:	f003 f9f1 	bl	8003a18 <__errno>
 8000636:	4603      	mov	r3, r0
 8000638:	2216      	movs	r2, #22
 800063a:	601a      	str	r2, [r3, #0]
  return -1;
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <_exit>:

void _exit (int status)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000650:	f04f 31ff 	mov.w	r1, #4294967295
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffe7 	bl	8000628 <_kill>
  while (1) {}    /* Make sure we hang here */
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <_exit+0x12>

0800065e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	e00a      	b.n	8000686 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000670:	f3af 8000 	nop.w
 8000674:	4601      	mov	r1, r0
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	b2ca      	uxtb	r2, r1
 800067e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	dbf0      	blt.n	8000670 <_read+0x12>
  }

  return len;
 800068e:	687b      	ldr	r3, [r7, #4]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	e009      	b.n	80006be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	60ba      	str	r2, [r7, #8]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	3301      	adds	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dbf1      	blt.n	80006aa <_write+0x12>
  }
  return len;
 80006c6:	687b      	ldr	r3, [r7, #4]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_close>:

int _close(int file)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006f8:	605a      	str	r2, [r3, #4]
  return 0;
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <_isatty>:

int _isatty(int file)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800071e:	b480      	push	{r7}
 8000720:	b085      	sub	sp, #20
 8000722:	af00      	add	r7, sp, #0
 8000724:	60f8      	str	r0, [r7, #12]
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000740:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <_sbrk+0x5c>)
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <_sbrk+0x60>)
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <_sbrk+0x64>)
 8000756:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <_sbrk+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <_sbrk+0x64>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	429a      	cmp	r2, r3
 8000766:	d207      	bcs.n	8000778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000768:	f003 f956 	bl	8003a18 <__errno>
 800076c:	4603      	mov	r3, r0
 800076e:	220c      	movs	r2, #12
 8000770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	e009      	b.n	800078c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077e:	4b07      	ldr	r3, [pc, #28]	@ (800079c <_sbrk+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <_sbrk+0x64>)
 8000788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20020000 	.word	0x20020000
 8000798:	00000400 	.word	0x00000400
 800079c:	20000084 	.word	0x20000084
 80007a0:	200005b8 	.word	0x200005b8

080007a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <SystemInit+0x20>)
 80007aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <SystemInit+0x20>)
 80007b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000800 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007cc:	f7ff ffea 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	@ (8000804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	@ (8000808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	@ (800080c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f003 f915 	bl	8003a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007fa:	f7ff fdef 	bl	80003dc <main>
  bx  lr    
 80007fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800080c:	0800458c 	.word	0x0800458c
  ldr r2, =_sbss
 8000810:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000814:	200005b8 	.word	0x200005b8

08000818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC_IRQHandler>
	...

0800081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <HAL_Init+0x40>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0d      	ldr	r2, [pc, #52]	@ (800085c <HAL_Init+0x40>)
 8000826:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800082a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800082c:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <HAL_Init+0x40>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <HAL_Init+0x40>)
 8000832:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b08      	ldr	r3, [pc, #32]	@ (800085c <HAL_Init+0x40>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a07      	ldr	r2, [pc, #28]	@ (800085c <HAL_Init+0x40>)
 800083e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f931 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084a:	2000      	movs	r0, #0
 800084c:	f000 f808 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000850:	f7ff fe80 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023c00 	.word	0x40023c00

08000860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_InitTick+0x54>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_InitTick+0x58>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000876:	fbb3 f3f1 	udiv	r3, r3, r1
 800087a:	fbb2 f3f3 	udiv	r3, r2, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f93b 	bl	8000afa <HAL_SYSTICK_Config>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e00e      	b.n	80008ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d80a      	bhi.n	80008aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f000 f911 	bl	8000ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a0:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_InitTick+0x5c>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_IncTick+0x20>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <HAL_IncTick+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <HAL_IncTick+0x24>)
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000088 	.word	0x20000088

080008e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b03      	ldr	r3, [pc, #12]	@ (80008fc <HAL_GetTick+0x14>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000088 	.word	0x20000088

08000900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff ffee 	bl	80008e8 <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d005      	beq.n	8000926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_Delay+0x44>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000926:	bf00      	nop
 8000928:	f7ff ffde 	bl	80008e8 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f7      	bhi.n	8000928 <HAL_Delay+0x28>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	@ (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	@ (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	@ 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	@ 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a78:	d301      	bcc.n	8000a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00f      	b.n	8000a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <SysTick_Config+0x40>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a86:	210f      	movs	r1, #15
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f7ff ff8e 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <SysTick_Config+0x40>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <SysTick_Config+0x40>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	e000e010 	.word	0xe000e010

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff47 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff5c 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff8e 	bl	8000a00 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5d 	bl	80009ac <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffb0 	bl	8000a68 <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	@ 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	e16b      	b.n	8000e08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b30:	2201      	movs	r2, #1
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	f040 815a 	bne.w	8000e02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d005      	beq.n	8000b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d130      	bne.n	8000bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	68da      	ldr	r2, [r3, #12]
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	091b      	lsrs	r3, r3, #4
 8000bb2:	f003 0201 	and.w	r2, r3, #1
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d017      	beq.n	8000c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d123      	bne.n	8000c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	08da      	lsrs	r2, r3, #3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3208      	adds	r2, #8
 8000c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	f003 0307 	and.w	r3, r3, #7
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	220f      	movs	r2, #15
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	691a      	ldr	r2, [r3, #16]
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	08da      	lsrs	r2, r3, #3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3208      	adds	r2, #8
 8000c52:	69b9      	ldr	r1, [r7, #24]
 8000c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0203 	and.w	r2, r3, #3
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f000 80b4 	beq.w	8000e02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b60      	ldr	r3, [pc, #384]	@ (8000e20 <HAL_GPIO_Init+0x30c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8000e20 <HAL_GPIO_Init+0x30c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000caa:	4b5d      	ldr	r3, [pc, #372]	@ (8000e20 <HAL_GPIO_Init+0x30c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cb6:	4a5b      	ldr	r2, [pc, #364]	@ (8000e24 <HAL_GPIO_Init+0x310>)
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	220f      	movs	r2, #15
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a52      	ldr	r2, [pc, #328]	@ (8000e28 <HAL_GPIO_Init+0x314>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d02b      	beq.n	8000d3a <HAL_GPIO_Init+0x226>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a51      	ldr	r2, [pc, #324]	@ (8000e2c <HAL_GPIO_Init+0x318>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d025      	beq.n	8000d36 <HAL_GPIO_Init+0x222>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a50      	ldr	r2, [pc, #320]	@ (8000e30 <HAL_GPIO_Init+0x31c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d01f      	beq.n	8000d32 <HAL_GPIO_Init+0x21e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8000e34 <HAL_GPIO_Init+0x320>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d019      	beq.n	8000d2e <HAL_GPIO_Init+0x21a>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8000e38 <HAL_GPIO_Init+0x324>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d013      	beq.n	8000d2a <HAL_GPIO_Init+0x216>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4d      	ldr	r2, [pc, #308]	@ (8000e3c <HAL_GPIO_Init+0x328>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00d      	beq.n	8000d26 <HAL_GPIO_Init+0x212>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000e40 <HAL_GPIO_Init+0x32c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d007      	beq.n	8000d22 <HAL_GPIO_Init+0x20e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4b      	ldr	r2, [pc, #300]	@ (8000e44 <HAL_GPIO_Init+0x330>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_GPIO_Init+0x20a>
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	e00e      	b.n	8000d3c <HAL_GPIO_Init+0x228>
 8000d1e:	2308      	movs	r3, #8
 8000d20:	e00c      	b.n	8000d3c <HAL_GPIO_Init+0x228>
 8000d22:	2306      	movs	r3, #6
 8000d24:	e00a      	b.n	8000d3c <HAL_GPIO_Init+0x228>
 8000d26:	2305      	movs	r3, #5
 8000d28:	e008      	b.n	8000d3c <HAL_GPIO_Init+0x228>
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x228>
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e004      	b.n	8000d3c <HAL_GPIO_Init+0x228>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_Init+0x228>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x228>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	f002 0203 	and.w	r2, r2, #3
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	4093      	lsls	r3, r2
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d4c:	4935      	ldr	r1, [pc, #212]	@ (8000e24 <HAL_GPIO_Init+0x310>)
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e48 <HAL_GPIO_Init+0x334>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d7e:	4a32      	ldr	r2, [pc, #200]	@ (8000e48 <HAL_GPIO_Init+0x334>)
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d84:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <HAL_GPIO_Init+0x334>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000da8:	4a27      	ldr	r2, [pc, #156]	@ (8000e48 <HAL_GPIO_Init+0x334>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dae:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <HAL_GPIO_Init+0x334>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e48 <HAL_GPIO_Init+0x334>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <HAL_GPIO_Init+0x334>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dfc:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <HAL_GPIO_Init+0x334>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3301      	adds	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	2b0f      	cmp	r3, #15
 8000e0c:	f67f ae90 	bls.w	8000b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3724      	adds	r7, #36	@ 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40013800 	.word	0x40013800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020800 	.word	0x40020800
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40021400 	.word	0x40021400
 8000e40:	40021800 	.word	0x40021800
 8000e44:	40021c00 	.word	0x40021c00
 8000e48:	40013c00 	.word	0x40013c00

08000e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e001      	b.n	8000e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e8c:	787b      	ldrb	r3, [r7, #1]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e98:	e003      	b.n	8000ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	041a      	lsls	r2, r3, #16
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	619a      	str	r2, [r3, #24]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	041a      	lsls	r2, r3, #16
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	400b      	ands	r3, r1
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 fe8d 	bl	8002c18 <USB_GetMode>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	f040 80fb 	bne.w	80010fc <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fe50 	bl	8002bb0 <USB_ReadInterrupts>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80f1 	beq.w	80010fa <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fe47 	bl	8002bb0 <USB_ReadInterrupts>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000f2c:	d104      	bne.n	8000f38 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f36:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 fe37 	bl	8002bb0 <USB_ReadInterrupts>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000f4c:	d104      	bne.n	8000f58 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f56:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fe27 	bl	8002bb0 <USB_ReadInterrupts>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000f6c:	d104      	bne.n	8000f78 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f76:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fe17 	bl	8002bb0 <USB_ReadInterrupts>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d103      	bne.n	8000f94 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2202      	movs	r2, #2
 8000f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fe09 	bl	8002bb0 <USB_ReadInterrupts>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fa8:	d120      	bne.n	8000fec <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fb2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d113      	bne.n	8000fec <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	6938      	ldr	r0, [r7, #16]
 8000fc8:	f001 fd3a 	bl	8002a40 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000fcc:	6938      	ldr	r0, [r7, #16]
 8000fce:	f001 fd69 	bl	8002aa4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7a5b      	ldrb	r3, [r3, #9]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d105      	bne.n	8000fe6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fe27 	bl	8002c34 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f002 f8df 	bl	80031aa <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fddd 	bl	8002bb0 <USB_ReadInterrupts>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001000:	d102      	bne.n	8001008 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f001 fc87 	bl	8002916 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fdcf 	bl	8002bb0 <USB_ReadInterrupts>
 8001012:	4603      	mov	r3, r0
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b08      	cmp	r3, #8
 800101a:	d106      	bne.n	800102a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f002 f8a8 	bl	8003172 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2208      	movs	r2, #8
 8001028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fdbe 	bl	8002bb0 <USB_ReadInterrupts>
 8001034:	4603      	mov	r3, r0
 8001036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800103e:	d139      	bne.n	80010b4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fe32 	bl	8002cae <USB_HC_ReadInterrupt>
 800104a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e025      	b.n	800109e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d018      	beq.n	8001098 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	015a      	lsls	r2, r3, #5
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4413      	add	r3, r2
 800106e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800107c:	d106      	bne.n	800108c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f859 	bl	800113c <HCD_HC_IN_IRQHandler>
 800108a:	e005      	b.n	8001098 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 febb 	bl	8001e0e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	795b      	ldrb	r3, [r3, #5]
 80010a2:	461a      	mov	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d3d3      	bcc.n	8001052 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fd79 	bl	8002bb0 <USB_ReadInterrupts>
 80010be:	4603      	mov	r3, r0
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d101      	bne.n	80010cc <HAL_HCD_IRQHandler+0x1ea>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_HCD_IRQHandler+0x1ec>
 80010cc:	2300      	movs	r3, #0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d014      	beq.n	80010fc <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	699a      	ldr	r2, [r3, #24]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0210 	bic.w	r2, r2, #16
 80010e0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f001 fb38 	bl	8002758 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0210 	orr.w	r2, r2, #16
 80010f6:	619a      	str	r2, [r3, #24]
 80010f8:	e000      	b.n	80010fc <HAL_HCD_IRQHandler+0x21a>
      return;
 80010fa:	bf00      	nop
    }
  }
}
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_HCD_Stop+0x16>
 8001114:	2302      	movs	r3, #2
 8001116:	e00d      	b.n	8001134 <HAL_HCD_Stop+0x32>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fef3 	bl	8002f10 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	78fa      	ldrb	r2, [r7, #3]
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fd3b 	bl	8002bd6 <USB_ReadChInterrupts>
 8001160:	4603      	mov	r3, r0
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b04      	cmp	r3, #4
 8001168:	d11a      	bne.n	80011a0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	015a      	lsls	r2, r3, #5
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4413      	add	r3, r2
 8001172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001176:	461a      	mov	r2, r3
 8001178:	2304      	movs	r3, #4
 800117a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800117c:	78fa      	ldrb	r2, [r7, #3]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	334d      	adds	r3, #77	@ 0x4d
 800118c:	2207      	movs	r2, #7
 800118e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	78fa      	ldrb	r2, [r7, #3]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fd99 	bl	8002cd0 <USB_HC_Halt>
 800119e:	e09e      	b.n	80012de <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	78fa      	ldrb	r2, [r7, #3]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fd14 	bl	8002bd6 <USB_ReadChInterrupts>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011b8:	d11b      	bne.n	80011f2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	015a      	lsls	r2, r3, #5
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4413      	add	r3, r2
 80011c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80011c6:	461a      	mov	r2, r3
 80011c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80011ce:	78fa      	ldrb	r2, [r7, #3]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	334d      	adds	r3, #77	@ 0x4d
 80011de:	2208      	movs	r2, #8
 80011e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	78fa      	ldrb	r2, [r7, #3]
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fd70 	bl	8002cd0 <USB_HC_Halt>
 80011f0:	e075      	b.n	80012de <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	78fa      	ldrb	r2, [r7, #3]
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fceb 	bl	8002bd6 <USB_ReadChInterrupts>
 8001200:	4603      	mov	r3, r0
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b08      	cmp	r3, #8
 8001208:	d11a      	bne.n	8001240 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	015a      	lsls	r2, r3, #5
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4413      	add	r3, r2
 8001212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001216:	461a      	mov	r2, r3
 8001218:	2308      	movs	r3, #8
 800121a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	334d      	adds	r3, #77	@ 0x4d
 800122c:	2206      	movs	r2, #6
 800122e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	78fa      	ldrb	r2, [r7, #3]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fd49 	bl	8002cd0 <USB_HC_Halt>
 800123e:	e04e      	b.n	80012de <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	78fa      	ldrb	r2, [r7, #3]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fcc4 	bl	8002bd6 <USB_ReadChInterrupts>
 800124e:	4603      	mov	r3, r0
 8001250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001258:	d11b      	bne.n	8001292 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	015a      	lsls	r2, r3, #5
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4413      	add	r3, r2
 8001262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001266:	461a      	mov	r2, r3
 8001268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800126c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800126e:	78fa      	ldrb	r2, [r7, #3]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	334d      	adds	r3, #77	@ 0x4d
 800127e:	2209      	movs	r2, #9
 8001280:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fd20 	bl	8002cd0 <USB_HC_Halt>
 8001290:	e025      	b.n	80012de <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	78fa      	ldrb	r2, [r7, #3]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fc9b 	bl	8002bd6 <USB_ReadChInterrupts>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a6:	2b80      	cmp	r3, #128	@ 0x80
 80012a8:	d119      	bne.n	80012de <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	015a      	lsls	r2, r3, #5
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4413      	add	r3, r2
 80012b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012b6:	461a      	mov	r2, r3
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	334d      	adds	r3, #77	@ 0x4d
 80012cc:	2207      	movs	r2, #7
 80012ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	78fa      	ldrb	r2, [r7, #3]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fcf9 	bl	8002cd0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	78fa      	ldrb	r2, [r7, #3]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fc75 	bl	8002bd6 <USB_ReadChInterrupts>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012f6:	d112      	bne.n	800131e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fce5 	bl	8002cd0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	015a      	lsls	r2, r3, #5
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4413      	add	r3, r2
 800130e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001312:	461a      	mov	r2, r3
 8001314:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001318:	6093      	str	r3, [r2, #8]
 800131a:	f000 bd75 	b.w	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	78fa      	ldrb	r2, [r7, #3]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fc55 	bl	8002bd6 <USB_ReadChInterrupts>
 800132c:	4603      	mov	r3, r0
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b01      	cmp	r3, #1
 8001334:	f040 8128 	bne.w	8001588 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	015a      	lsls	r2, r3, #5
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4413      	add	r3, r2
 8001340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001344:	461a      	mov	r2, r3
 8001346:	2320      	movs	r3, #32
 8001348:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	331b      	adds	r3, #27
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d119      	bne.n	8001394 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001360:	78fa      	ldrb	r2, [r7, #3]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	331b      	adds	r3, #27
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	015a      	lsls	r2, r3, #5
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4413      	add	r3, r2
 800137c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	78fa      	ldrb	r2, [r7, #3]
 8001384:	0151      	lsls	r1, r2, #5
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	440a      	add	r2, r1
 800138a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800138e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001392:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	799b      	ldrb	r3, [r3, #6]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d01b      	beq.n	80013d4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800139c:	78fa      	ldrb	r2, [r7, #3]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	1a9b      	subs	r3, r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	3330      	adds	r3, #48	@ 0x30
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c0:	78fa      	ldrb	r2, [r7, #3]
 80013c2:	1ac9      	subs	r1, r1, r3
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4403      	add	r3, r0
 80013d0:	3338      	adds	r3, #56	@ 0x38
 80013d2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	334d      	adds	r3, #77	@ 0x4d
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	3344      	adds	r3, #68	@ 0x44
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	015a      	lsls	r2, r3, #5
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4413      	add	r3, r2
 8001404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001408:	461a      	mov	r2, r3
 800140a:	2301      	movs	r3, #1
 800140c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800140e:	78fa      	ldrb	r2, [r7, #3]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	3326      	adds	r3, #38	@ 0x26
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00a      	beq.n	800143a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	3326      	adds	r3, #38	@ 0x26
 8001434:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001436:	2b02      	cmp	r3, #2
 8001438:	d110      	bne.n	800145c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	78fa      	ldrb	r2, [r7, #3]
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fc44 	bl	8002cd0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4413      	add	r3, r2
 8001450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001454:	461a      	mov	r2, r3
 8001456:	2310      	movs	r3, #16
 8001458:	6093      	str	r3, [r2, #8]
 800145a:	e03d      	b.n	80014d8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800145c:	78fa      	ldrb	r2, [r7, #3]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3326      	adds	r3, #38	@ 0x26
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d00a      	beq.n	8001488 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3326      	adds	r3, #38	@ 0x26
 8001482:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001484:	2b01      	cmp	r3, #1
 8001486:	d127      	bne.n	80014d8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	015a      	lsls	r2, r3, #5
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4413      	add	r3, r2
 8001490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	0151      	lsls	r1, r2, #5
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	440a      	add	r2, r1
 800149e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80014a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80014a8:	78fa      	ldrb	r2, [r7, #3]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	334c      	adds	r3, #76	@ 0x4c
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80014bc:	78fa      	ldrb	r2, [r7, #3]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	334c      	adds	r3, #76	@ 0x4c
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f001 fe77 	bl	80031c6 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	799b      	ldrb	r3, [r3, #6]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d13b      	bne.n	8001558 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80014e0:	78fa      	ldrb	r2, [r7, #3]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	3338      	adds	r3, #56	@ 0x38
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	78fa      	ldrb	r2, [r7, #3]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4403      	add	r3, r0
 8001500:	3328      	adds	r3, #40	@ 0x28
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	440b      	add	r3, r1
 8001506:	1e59      	subs	r1, r3, #1
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4403      	add	r3, r0
 8001516:	3328      	adds	r3, #40	@ 0x28
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	fbb1 f3f3 	udiv	r3, r1, r3
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8470 	beq.w	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001528:	78fa      	ldrb	r2, [r7, #3]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	333c      	adds	r3, #60	@ 0x3c
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	f083 0301 	eor.w	r3, r3, #1
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	333c      	adds	r3, #60	@ 0x3c
 8001550:	4602      	mov	r2, r0
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	f000 bc58 	b.w	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	333c      	adds	r3, #60	@ 0x3c
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	78fa      	ldrb	r2, [r7, #3]
 800156c:	f083 0301 	eor.w	r3, r3, #1
 8001570:	b2d8      	uxtb	r0, r3
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	333c      	adds	r3, #60	@ 0x3c
 8001580:	4602      	mov	r2, r0
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	f000 bc40 	b.w	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f001 fb20 	bl	8002bd6 <USB_ReadChInterrupts>
 8001596:	4603      	mov	r3, r0
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b20      	cmp	r3, #32
 800159e:	d131      	bne.n	8001604 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015ac:	461a      	mov	r2, r3
 80015ae:	2320      	movs	r3, #32
 80015b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	331a      	adds	r3, #26
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	f040 841f 	bne.w	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	331b      	adds	r3, #27
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	334d      	adds	r3, #77	@ 0x4d
 80015ee:	2203      	movs	r2, #3
 80015f0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fb68 	bl	8002cd0 <USB_HC_Halt>
 8001600:	f000 bc02 	b.w	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f001 fae2 	bl	8002bd6 <USB_ReadChInterrupts>
 8001612:	4603      	mov	r3, r0
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b02      	cmp	r3, #2
 800161a:	f040 8305 	bne.w	8001c28 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4413      	add	r3, r2
 8001626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800162a:	461a      	mov	r2, r3
 800162c:	2302      	movs	r3, #2
 800162e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	334d      	adds	r3, #77	@ 0x4d
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d114      	bne.n	8001670 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	334d      	adds	r3, #77	@ 0x4d
 8001656:	2202      	movs	r2, #2
 8001658:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	334c      	adds	r3, #76	@ 0x4c
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e2cc      	b.n	8001c0a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	334d      	adds	r3, #77	@ 0x4d
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b06      	cmp	r3, #6
 8001684:	d114      	bne.n	80016b0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	334d      	adds	r3, #77	@ 0x4d
 8001696:	2202      	movs	r2, #2
 8001698:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	334c      	adds	r3, #76	@ 0x4c
 80016aa:	2205      	movs	r2, #5
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e2ac      	b.n	8001c0a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	334d      	adds	r3, #77	@ 0x4d
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b07      	cmp	r3, #7
 80016c4:	d00b      	beq.n	80016de <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	334d      	adds	r3, #77	@ 0x4d
 80016d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80016d8:	2b09      	cmp	r3, #9
 80016da:	f040 80a6 	bne.w	800182a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80016de:	78fa      	ldrb	r2, [r7, #3]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	334d      	adds	r3, #77	@ 0x4d
 80016ee:	2202      	movs	r2, #2
 80016f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3344      	adds	r3, #68	@ 0x44
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	1c59      	adds	r1, r3, #1
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4403      	add	r3, r0
 8001712:	3344      	adds	r3, #68	@ 0x44
 8001714:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3344      	adds	r3, #68	@ 0x44
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d943      	bls.n	80017b4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	3344      	adds	r3, #68	@ 0x44
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	1a9b      	subs	r3, r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	331a      	adds	r3, #26
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d123      	bne.n	800179e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	331b      	adds	r3, #27
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	331c      	adds	r3, #28
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4413      	add	r3, r2
 8001786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	0151      	lsls	r1, r2, #5
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	440a      	add	r2, r1
 8001794:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800179c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	334c      	adds	r3, #76	@ 0x4c
 80017ae:	2204      	movs	r2, #4
 80017b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80017b2:	e229      	b.n	8001c08 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	334c      	adds	r3, #76	@ 0x4c
 80017c4:	2202      	movs	r2, #2
 80017c6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3326      	adds	r3, #38	@ 0x26
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	3326      	adds	r3, #38	@ 0x26
 80017ee:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	f040 8209 	bne.w	8001c08 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800180c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001814:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4413      	add	r3, r2
 800181e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001828:	e1ee      	b.n	8001c08 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	334d      	adds	r3, #77	@ 0x4d
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b05      	cmp	r3, #5
 800183e:	f040 80c8 	bne.w	80019d2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	334d      	adds	r3, #77	@ 0x4d
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	331b      	adds	r3, #27
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	f040 81ce 	bne.w	8001c0a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3326      	adds	r3, #38	@ 0x26
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d16b      	bne.n	800195c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3348      	adds	r3, #72	@ 0x48
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	1c59      	adds	r1, r3, #1
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4403      	add	r3, r0
 80018a4:	3348      	adds	r3, #72	@ 0x48
 80018a6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	3348      	adds	r3, #72	@ 0x48
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d943      	bls.n	8001946 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	3348      	adds	r3, #72	@ 0x48
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	331b      	adds	r3, #27
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	3344      	adds	r3, #68	@ 0x44
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d809      	bhi.n	8001910 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	331c      	adds	r3, #28
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4413      	add	r3, r2
 8001918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	0151      	lsls	r1, r2, #5
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	440a      	add	r2, r1
 8001926:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800192a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800192e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	334c      	adds	r3, #76	@ 0x4c
 8001940:	2204      	movs	r2, #4
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e014      	b.n	8001970 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	334c      	adds	r3, #76	@ 0x4c
 8001956:	2202      	movs	r2, #2
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e009      	b.n	8001970 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	334c      	adds	r3, #76	@ 0x4c
 800196c:	2202      	movs	r2, #2
 800196e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	3326      	adds	r3, #38	@ 0x26
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	3326      	adds	r3, #38	@ 0x26
 8001996:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001998:	2b02      	cmp	r3, #2
 800199a:	f040 8136 	bne.w	8001c0a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	015a      	lsls	r2, r3, #5
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80019b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80019bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e11b      	b.n	8001c0a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	334d      	adds	r3, #77	@ 0x4d
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	f040 8081 	bne.w	8001aec <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	334d      	adds	r3, #77	@ 0x4d
 80019fa:	2202      	movs	r2, #2
 80019fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	331b      	adds	r3, #27
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	f040 80fa 	bne.w	8001c0a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	334c      	adds	r3, #76	@ 0x4c
 8001a26:	2202      	movs	r2, #2
 8001a28:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	0151      	lsls	r1, r2, #5
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	440a      	add	r2, r1
 8001a40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a48:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	0151      	lsls	r1, r2, #5
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	440a      	add	r2, r1
 8001a60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a68:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	015a      	lsls	r2, r3, #5
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	0151      	lsls	r1, r2, #5
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	440a      	add	r2, r1
 8001a80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001a84:	f023 0320 	bic.w	r3, r3, #32
 8001a88:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	3326      	adds	r3, #38	@ 0x26
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00b      	beq.n	8001ab8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	3326      	adds	r3, #38	@ 0x26
 8001ab0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	f040 80a9 	bne.w	8001c0a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001ace:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ad6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e08e      	b.n	8001c0a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	334d      	adds	r3, #77	@ 0x4d
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d143      	bne.n	8001b8a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	334d      	adds	r3, #77	@ 0x4d
 8001b12:	2202      	movs	r2, #2
 8001b14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	334c      	adds	r3, #76	@ 0x4c
 8001b26:	2202      	movs	r2, #2
 8001b28:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	3326      	adds	r3, #38	@ 0x26
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3326      	adds	r3, #38	@ 0x26
 8001b50:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d159      	bne.n	8001c0a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001b6c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b74:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e03f      	b.n	8001c0a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	334d      	adds	r3, #77	@ 0x4d
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d126      	bne.n	8001bee <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	334d      	adds	r3, #77	@ 0x4d
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3344      	adds	r3, #68	@ 0x44
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	1c59      	adds	r1, r3, #1
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4403      	add	r3, r0
 8001bd4:	3344      	adds	r3, #68	@ 0x44
 8001bd6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	334c      	adds	r3, #76	@ 0x4c
 8001be8:	2204      	movs	r2, #4
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e00d      	b.n	8001c0a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	1a9b      	subs	r3, r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	334d      	adds	r3, #77	@ 0x4d
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	f000 8100 	beq.w	8001e06 <HCD_HC_IN_IRQHandler+0xcca>
 8001c06:	e000      	b.n	8001c0a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001c08:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	334c      	adds	r3, #76	@ 0x4c
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f001 fad0 	bl	80031c6 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c26:	e0ef      	b.n	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 ffd0 	bl	8002bd6 <USB_ReadChInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c3c:	2b40      	cmp	r3, #64	@ 0x40
 8001c3e:	d12f      	bne.n	8001ca0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2340      	movs	r3, #64	@ 0x40
 8001c50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	334d      	adds	r3, #77	@ 0x4d
 8001c62:	2205      	movs	r2, #5
 8001c64:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001c66:	78fa      	ldrb	r2, [r7, #3]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	331a      	adds	r3, #26
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3344      	adds	r3, #68	@ 0x44
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 f819 	bl	8002cd0 <USB_HC_Halt>
 8001c9e:	e0b3      	b.n	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 ff94 	bl	8002bd6 <USB_ReadChInterrupts>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	f040 80a7 	bne.w	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3326      	adds	r3, #38	@ 0x26
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d11b      	bne.n	8001d08 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3344      	adds	r3, #68	@ 0x44
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	334d      	adds	r3, #77	@ 0x4d
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 ffe5 	bl	8002cd0 <USB_HC_Halt>
 8001d06:	e03f      	b.n	8001d88 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3326      	adds	r3, #38	@ 0x26
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00a      	beq.n	8001d34 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3326      	adds	r3, #38	@ 0x26
 8001d2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d129      	bne.n	8001d88 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	3344      	adds	r3, #68	@ 0x44
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	799b      	ldrb	r3, [r3, #6]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HCD_HC_IN_IRQHandler+0xc2a>
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	331b      	adds	r3, #27
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d110      	bne.n	8001d88 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	334d      	adds	r3, #77	@ 0x4d
 8001d76:	2204      	movs	r2, #4
 8001d78:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 ffa4 	bl	8002cd0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	331b      	adds	r3, #27
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d129      	bne.n	8001df2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001d9e:	78fa      	ldrb	r2, [r7, #3]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	331b      	adds	r3, #27
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	0151      	lsls	r1, r2, #5
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	440a      	add	r2, r1
 8001dc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	0151      	lsls	r1, r2, #5
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	440a      	add	r2, r1
 8001de8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001dec:	f043 0320 	orr.w	r3, r3, #32
 8001df0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2310      	movs	r3, #16
 8001e02:	6093      	str	r3, [r2, #8]
 8001e04:	e000      	b.n	8001e08 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8001e06:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fed2 	bl	8002bd6 <USB_ReadChInterrupts>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d11b      	bne.n	8001e74 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	334d      	adds	r3, #77	@ 0x4d
 8001e5e:	2207      	movs	r2, #7
 8001e60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 ff30 	bl	8002cd0 <USB_HC_Halt>
 8001e70:	f000 bc6f 	b.w	8002752 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 feaa 	bl	8002bd6 <USB_ReadChInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	f040 8082 	bne.w	8001f92 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3319      	adds	r3, #25
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d124      	bne.n	8001f00 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3319      	adds	r3, #25
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	334c      	adds	r3, #76	@ 0x4c
 8001eda:	2202      	movs	r2, #2
 8001edc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	334d      	adds	r3, #77	@ 0x4d
 8001eee:	2203      	movs	r2, #3
 8001ef0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fee8 	bl	8002cd0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	331a      	adds	r3, #26
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	f040 841d 	bne.w	8002752 <HCD_HC_OUT_IRQHandler+0x944>
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	331b      	adds	r3, #27
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 8411 	bne.w	8002752 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3326      	adds	r3, #38	@ 0x26
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d009      	beq.n	8001f5a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	331b      	adds	r3, #27
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	334d      	adds	r3, #77	@ 0x4d
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 feaa 	bl	8002cd0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3344      	adds	r3, #68	@ 0x44
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e3df      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fe1b 	bl	8002bd6 <USB_ReadChInterrupts>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001faa:	d111      	bne.n	8001fd0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fbe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fe81 	bl	8002cd0 <USB_HC_Halt>
 8001fce:	e3c0      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fdfc 	bl	8002bd6 <USB_ReadChInterrupts>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d168      	bne.n	80020ba <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3344      	adds	r3, #68	@ 0x44
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fde6 	bl	8002bd6 <USB_ReadChInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	2b40      	cmp	r3, #64	@ 0x40
 8002012:	d112      	bne.n	800203a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3319      	adds	r3, #25
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	2340      	movs	r3, #64	@ 0x40
 8002038:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	331b      	adds	r3, #27
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d019      	beq.n	8002084 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	331b      	adds	r3, #27
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	0151      	lsls	r1, r2, #5
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	440a      	add	r2, r1
 800207a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800207e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002082:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002090:	461a      	mov	r2, r3
 8002092:	2301      	movs	r3, #1
 8002094:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	334d      	adds	r3, #77	@ 0x4d
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fe0c 	bl	8002cd0 <USB_HC_Halt>
 80020b8:	e34b      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fd87 	bl	8002bd6 <USB_ReadChInterrupts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ce:	2b40      	cmp	r3, #64	@ 0x40
 80020d0:	d139      	bne.n	8002146 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	334d      	adds	r3, #77	@ 0x4d
 80020e2:	2205      	movs	r2, #5
 80020e4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	331a      	adds	r3, #26
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3319      	adds	r3, #25
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	3344      	adds	r3, #68	@ 0x44
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fdcf 	bl	8002cd0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	2340      	movs	r3, #64	@ 0x40
 8002142:	6093      	str	r3, [r2, #8]
 8002144:	e305      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fd41 	bl	8002bd6 <USB_ReadChInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b08      	cmp	r3, #8
 800215c:	d11a      	bne.n	8002194 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800216a:	461a      	mov	r2, r3
 800216c:	2308      	movs	r3, #8
 800216e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	334d      	adds	r3, #77	@ 0x4d
 8002180:	2206      	movs	r2, #6
 8002182:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fd9f 	bl	8002cd0 <USB_HC_Halt>
 8002192:	e2de      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fd1a 	bl	8002bd6 <USB_ReadChInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d144      	bne.n	8002236 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3344      	adds	r3, #68	@ 0x44
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	334d      	adds	r3, #77	@ 0x4d
 80021d0:	2204      	movs	r2, #4
 80021d2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3319      	adds	r3, #25
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d114      	bne.n	8002214 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	3318      	adds	r3, #24
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	3319      	adds	r3, #25
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fd57 	bl	8002cd0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800222e:	461a      	mov	r2, r3
 8002230:	2310      	movs	r3, #16
 8002232:	6093      	str	r3, [r2, #8]
 8002234:	e28d      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fcc9 	bl	8002bd6 <USB_ReadChInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224a:	2b80      	cmp	r3, #128	@ 0x80
 800224c:	d169      	bne.n	8002322 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	799b      	ldrb	r3, [r3, #6]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d111      	bne.n	800227a <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	334d      	adds	r3, #77	@ 0x4d
 8002266:	2207      	movs	r2, #7
 8002268:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fd2c 	bl	8002cd0 <USB_HC_Halt>
 8002278:	e049      	b.n	800230e <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3344      	adds	r3, #68	@ 0x44
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1c59      	adds	r1, r3, #1
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4403      	add	r3, r0
 800229a:	3344      	adds	r3, #68	@ 0x44
 800229c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	3344      	adds	r3, #68	@ 0x44
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d922      	bls.n	80022fa <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3344      	adds	r3, #68	@ 0x44
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334c      	adds	r3, #76	@ 0x4c
 80022d8:	2204      	movs	r2, #4
 80022da:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	334c      	adds	r3, #76	@ 0x4c
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 ff67 	bl	80031c6 <HAL_HCD_HC_NotifyURBChange_Callback>
 80022f8:	e009      	b.n	800230e <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	334c      	adds	r3, #76	@ 0x4c
 800230a:	2202      	movs	r2, #2
 800230c:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231a:	461a      	mov	r2, r3
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	6093      	str	r3, [r2, #8]
 8002320:	e217      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fc53 	bl	8002bd6 <USB_ReadChInterrupts>
 8002330:	4603      	mov	r3, r0
 8002332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233a:	d11b      	bne.n	8002374 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334d      	adds	r3, #77	@ 0x4d
 800234c:	2209      	movs	r2, #9
 800234e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fcb9 	bl	8002cd0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800236a:	461a      	mov	r2, r3
 800236c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002370:	6093      	str	r3, [r2, #8]
 8002372:	e1ee      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fc2a 	bl	8002bd6 <USB_ReadChInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b02      	cmp	r3, #2
 800238a:	f040 81df 	bne.w	800274c <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800239a:	461a      	mov	r2, r3
 800239c:	2302      	movs	r3, #2
 800239e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	334d      	adds	r3, #77	@ 0x4d
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	f040 8093 	bne.w	80024de <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	334d      	adds	r3, #77	@ 0x4d
 80023c8:	2202      	movs	r2, #2
 80023ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	334c      	adds	r3, #76	@ 0x4c
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3326      	adds	r3, #38	@ 0x26
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d00b      	beq.n	800240e <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3326      	adds	r3, #38	@ 0x26
 8002406:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002408:	2b03      	cmp	r3, #3
 800240a:	f040 8190 	bne.w	800272e <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	799b      	ldrb	r3, [r3, #6]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d115      	bne.n	8002442 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	333d      	adds	r3, #61	@ 0x3d
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2d8      	uxtb	r0, r3
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	333d      	adds	r3, #61	@ 0x3d
 800243e:	4602      	mov	r2, r0
 8002440:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	799b      	ldrb	r3, [r3, #6]
 8002446:	2b01      	cmp	r3, #1
 8002448:	f040 8171 	bne.w	800272e <HCD_HC_OUT_IRQHandler+0x920>
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3334      	adds	r3, #52	@ 0x34
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8165 	beq.w	800272e <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3334      	adds	r3, #52	@ 0x34
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4403      	add	r3, r0
 8002484:	3328      	adds	r3, #40	@ 0x28
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	440b      	add	r3, r1
 800248a:	1e59      	subs	r1, r3, #1
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4403      	add	r3, r0
 800249a:	3328      	adds	r3, #40	@ 0x28
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 813f 	beq.w	800272e <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	333d      	adds	r3, #61	@ 0x3d
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	f083 0301 	eor.w	r3, r3, #1
 80024c8:	b2d8      	uxtb	r0, r3
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	333d      	adds	r3, #61	@ 0x3d
 80024d8:	4602      	mov	r2, r0
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e127      	b.n	800272e <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	334d      	adds	r3, #77	@ 0x4d
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d120      	bne.n	8002536 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	334d      	adds	r3, #77	@ 0x4d
 8002504:	2202      	movs	r2, #2
 8002506:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	331b      	adds	r3, #27
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	f040 8107 	bne.w	800272e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	334c      	adds	r3, #76	@ 0x4c
 8002530:	2202      	movs	r2, #2
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e0fb      	b.n	800272e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	334d      	adds	r3, #77	@ 0x4d
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b04      	cmp	r3, #4
 800254a:	d13a      	bne.n	80025c2 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	334d      	adds	r3, #77	@ 0x4d
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	334c      	adds	r3, #76	@ 0x4c
 8002570:	2202      	movs	r2, #2
 8002572:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	331b      	adds	r3, #27
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	f040 80d1 	bne.w	800272e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	331b      	adds	r3, #27
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	0151      	lsls	r1, r2, #5
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	440a      	add	r2, r1
 80025b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025be:	6053      	str	r3, [r2, #4]
 80025c0:	e0b5      	b.n	800272e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	334d      	adds	r3, #77	@ 0x4d
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d114      	bne.n	8002602 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	334d      	adds	r3, #77	@ 0x4d
 80025e8:	2202      	movs	r2, #2
 80025ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	334c      	adds	r3, #76	@ 0x4c
 80025fc:	2202      	movs	r2, #2
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e095      	b.n	800272e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	334d      	adds	r3, #77	@ 0x4d
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b06      	cmp	r3, #6
 8002616:	d114      	bne.n	8002642 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	334d      	adds	r3, #77	@ 0x4d
 8002628:	2202      	movs	r2, #2
 800262a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	334c      	adds	r3, #76	@ 0x4c
 800263c:	2205      	movs	r2, #5
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e075      	b.n	800272e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	334d      	adds	r3, #77	@ 0x4d
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b07      	cmp	r3, #7
 8002656:	d00a      	beq.n	800266e <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	334d      	adds	r3, #77	@ 0x4d
 8002668:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800266a:	2b09      	cmp	r3, #9
 800266c:	d170      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	334d      	adds	r3, #77	@ 0x4d
 800267e:	2202      	movs	r2, #2
 8002680:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3344      	adds	r3, #68	@ 0x44
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1c59      	adds	r1, r3, #1
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4403      	add	r3, r0
 80026a2:	3344      	adds	r3, #68	@ 0x44
 80026a4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	3344      	adds	r3, #68	@ 0x44
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d914      	bls.n	80026e6 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3344      	adds	r3, #68	@ 0x44
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	334c      	adds	r3, #76	@ 0x4c
 80026e0:	2204      	movs	r2, #4
 80026e2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026e4:	e022      	b.n	800272c <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	334c      	adds	r3, #76	@ 0x4c
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002710:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002718:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800272c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	334c      	adds	r3, #76	@ 0x4c
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	4619      	mov	r1, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fd3e 	bl	80031c6 <HAL_HCD_HC_NotifyURBChange_Callback>
 800274a:	e002      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800274c:	bf00      	nop
 800274e:	e000      	b.n	8002752 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002750:	bf00      	nop
  }
}
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	@ 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	0c5b      	lsrs	r3, r3, #17
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d004      	beq.n	800279e <HCD_RXQLVL_IRQHandler+0x46>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b05      	cmp	r3, #5
 8002798:	f000 80b6 	beq.w	8002908 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800279c:	e0b7      	b.n	800290e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80b3 	beq.w	800290c <HCD_RXQLVL_IRQHandler+0x1b4>
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	332c      	adds	r3, #44	@ 0x2c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a7 	beq.w	800290c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	3338      	adds	r3, #56	@ 0x38
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	18d1      	adds	r1, r2, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4403      	add	r3, r0
 80027e2:	3334      	adds	r3, #52	@ 0x34
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4299      	cmp	r1, r3
 80027e8:	f200 8083 	bhi.w	80028f2 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	332c      	adds	r3, #44	@ 0x2c
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	b292      	uxth	r2, r2
 8002806:	4619      	mov	r1, r3
 8002808:	f000 f97a 	bl	8002b00 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	332c      	adds	r3, #44	@ 0x2c
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	18d1      	adds	r1, r2, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4403      	add	r3, r0
 8002830:	332c      	adds	r3, #44	@ 0x2c
 8002832:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3338      	adds	r3, #56	@ 0x38
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	18d1      	adds	r1, r2, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4613      	mov	r3, r2
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4403      	add	r3, r0
 8002858:	3338      	adds	r3, #56	@ 0x38
 800285a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	0cdb      	lsrs	r3, r3, #19
 800286c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002870:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3328      	adds	r3, #40	@ 0x28
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4293      	cmp	r3, r2
 800288a:	d13f      	bne.n	800290c <HCD_RXQLVL_IRQHandler+0x1b4>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d03c      	beq.n	800290c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028a8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028b0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028be:	461a      	mov	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	333c      	adds	r3, #60	@ 0x3c
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2d8      	uxtb	r0, r3
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	333c      	adds	r3, #60	@ 0x3c
 80028ec:	4602      	mov	r2, r0
 80028ee:	701a      	strb	r2, [r3, #0]
      break;
 80028f0:	e00c      	b.n	800290c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	334c      	adds	r3, #76	@ 0x4c
 8002902:	2204      	movs	r2, #4
 8002904:	701a      	strb	r2, [r3, #0]
      break;
 8002906:	e001      	b.n	800290c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800290c:	bf00      	nop
  }
}
 800290e:	bf00      	nop
 8002910:	3728      	adds	r7, #40	@ 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002942:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	d10b      	bne.n	8002966 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d102      	bne.n	800295e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fc18 	bl	800318e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b08      	cmp	r3, #8
 800296e:	d132      	bne.n	80029d6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b04      	cmp	r3, #4
 8002980:	d126      	bne.n	80029d0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7a5b      	ldrb	r3, [r3, #9]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d113      	bne.n	80029b2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002990:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002994:	d106      	bne.n	80029a4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2102      	movs	r1, #2
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f949 	bl	8002c34 <USB_InitFSLSPClkSel>
 80029a2:	e011      	b.n	80029c8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f942 	bl	8002c34 <USB_InitFSLSPClkSel>
 80029b0:	e00a      	b.n	80029c8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	79db      	ldrb	r3, [r3, #7]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d106      	bne.n	80029c8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029c0:	461a      	mov	r2, r3
 80029c2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80029c6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fc0a 	bl	80031e2 <HAL_HCD_PortEnabled_Callback>
 80029ce:	e002      	b.n	80029d6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fc14 	bl	80031fe <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d103      	bne.n	80029e8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f043 0320 	orr.w	r3, r3, #32
 80029e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 0201 	bic.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3301      	adds	r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002a5a:	d901      	bls.n	8002a60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e01b      	b.n	8002a98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	daf2      	bge.n	8002a4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	019b      	lsls	r3, r3, #6
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002a84:	d901      	bls.n	8002a8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e006      	b.n	8002a98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d0f0      	beq.n	8002a78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002abc:	d901      	bls.n	8002ac2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e018      	b.n	8002af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	daf2      	bge.n	8002ab0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ae0:	d901      	bls.n	8002ae6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e006      	b.n	8002af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d0f0      	beq.n	8002ad4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b08b      	sub	sp, #44	@ 0x2c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	e014      	b.n	8002b56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	601a      	str	r2, [r3, #0]
    pDest++;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	3301      	adds	r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	3301      	adds	r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	3301      	adds	r3, #1
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	6a3a      	ldr	r2, [r7, #32]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d3e6      	bcc.n	8002b2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002b5e:	8bfb      	ldrh	r3, [r7, #30]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01e      	beq.n	8002ba2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	701a      	strb	r2, [r3, #0]
      i++;
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	3301      	adds	r3, #1
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8002b96:	8bfb      	ldrh	r3, [r7, #30]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002b9c:	8bfb      	ldrh	r3, [r7, #30]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ea      	bne.n	8002b78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	372c      	adds	r7, #44	@ 0x2c
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0301 	and.w	r3, r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d107      	bne.n	8002c86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8002c82:	6053      	str	r3, [r2, #4]
 8002c84:	e00c      	b.n	8002ca0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d107      	bne.n	8002c9c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c92:	461a      	mov	r2, r3
 8002c94:	f241 7370 	movw	r3, #6000	@ 0x1770
 8002c98:	6053      	str	r3, [r2, #4]
 8002c9a:	e001      	b.n	8002ca0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	b29b      	uxth	r3, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	@ 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0c9b      	lsrs	r3, r3, #18
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0fdb      	lsrs	r3, r3, #31
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	0fdb      	lsrs	r3, r3, #31
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d10d      	bne.n	8002d52 <USB_HC_Halt+0x82>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <USB_HC_Halt+0x82>
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d002      	beq.n	8002d4e <USB_HC_Halt+0x7e>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d101      	bne.n	8002d52 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e0d8      	b.n	8002f04 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <USB_HC_Halt+0x8e>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d173      	bne.n	8002e46 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	0151      	lsls	r1, r2, #5
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	440a      	add	r2, r1
 8002d74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d7c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d14a      	bne.n	8002e20 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d133      	bne.n	8002dfe <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	0151      	lsls	r1, r2, #5
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	440a      	add	r2, r1
 8002dac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002db4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	0151      	lsls	r1, r2, #5
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	440a      	add	r2, r1
 8002dcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dd4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002de2:	d82e      	bhi.n	8002e42 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002df6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dfa:	d0ec      	beq.n	8002dd6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002dfc:	e081      	b.n	8002f02 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	0151      	lsls	r1, r2, #5
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	440a      	add	r2, r1
 8002e14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e1c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002e1e:	e070      	b.n	8002f02 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	0151      	lsls	r1, r2, #5
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	440a      	add	r2, r1
 8002e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e3e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002e40:	e05f      	b.n	8002f02 <USB_HC_Halt+0x232>
            break;
 8002e42:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002e44:	e05d      	b.n	8002f02 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	0151      	lsls	r1, r2, #5
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	440a      	add	r2, r1
 8002e5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e64:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d133      	bne.n	8002ede <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e94:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	0151      	lsls	r1, r2, #5
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	440a      	add	r2, r1
 8002eac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002eb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002eb4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ec2:	d81d      	bhi.n	8002f00 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002eda:	d0ec      	beq.n	8002eb6 <USB_HC_Halt+0x1e6>
 8002edc:	e011      	b.n	8002f02 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	0151      	lsls	r1, r2, #5
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	440a      	add	r2, r1
 8002ef4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ef8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e000      	b.n	8002f02 <USB_HC_Halt+0x232>
          break;
 8002f00:	bf00      	nop
    }
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3724      	adds	r7, #36	@ 0x24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff fd7a 	bl	8002a1e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f2a:	2110      	movs	r1, #16
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fd87 	bl	8002a40 <USB_FlushTxFifo>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff fdb1 	bl	8002aa4 <USB_FlushRxFifo>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e01f      	b.n	8002f92 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002f78:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f86:	461a      	mov	r2, r3
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d9dc      	bls.n	8002f52 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e034      	b.n	8003008 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fb4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002fc4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fe4:	d80c      	bhi.n	8003000 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ffc:	d0ec      	beq.n	8002fd8 <USB_StopHost+0xc8>
 8002ffe:	e000      	b.n	8003002 <USB_StopHost+0xf2>
        break;
 8003000:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	3301      	adds	r3, #1
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d9c7      	bls.n	8002f9e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003014:	461a      	mov	r2, r3
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
 800301a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f04f 32ff 	mov.w	r2, #4294967295
 8003022:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fce9 	bl	80029fc <USB_EnableGlobalInt>

  return ret;
 800302a:	7ffb      	ldrb	r3, [r7, #31]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f804 	bl	8003058 <USBH_HandleSof>
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b0b      	cmp	r3, #11
 8003068:	d10a      	bne.n	8003080 <USBH_HandleSof+0x28>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
  }
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8003098:	bf00      	nop
}
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80030b4:	bf00      	nop
}
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f883 	bl	800321a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	791b      	ldrb	r3, [r3, #4]
 8003118:	4619      	mov	r1, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f80b 	bl	8003136 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	795b      	ldrb	r3, [r3, #5]
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f805 	bl	8003136 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d80d      	bhi.n	8003164 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	33e0      	adds	r3, #224	@ 0xe0
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	33e0      	adds	r3, #224	@ 0xe0
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff57 	bl	8003034 <USBH_LL_IncTimer>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff8f 	bl	80030c0 <USBH_LL_Connect>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff98 	bl	80030ee <USBH_LL_Disconnect>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70fb      	strb	r3, [r7, #3]
 80031d2:	4613      	mov	r3, r2
 80031d4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff49 	bl	8003088 <USBH_LL_PortEnabled>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff49 	bl	80030a4 <USBH_LL_PortDisabled>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd ff66 	bl	8001102 <HAL_HCD_Stop>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 f807 	bl	8003250 <USBH_Get_USB_Status>
 8003242:	4603      	mov	r3, r0
 8003244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003246:	7bbb      	ldrb	r3, [r7, #14]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d817      	bhi.n	8003294 <USBH_Get_USB_Status+0x44>
 8003264:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <USBH_Get_USB_Status+0x1c>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003283 	.word	0x08003283
 8003274:	08003289 	.word	0x08003289
 8003278:	0800328f 	.word	0x0800328f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
    break;
 8003280:	e00b      	b.n	800329a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8003282:	2302      	movs	r3, #2
 8003284:	73fb      	strb	r3, [r7, #15]
    break;
 8003286:	e008      	b.n	800329a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
    break;
 800328c:	e005      	b.n	800329a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800328e:	2302      	movs	r3, #2
 8003290:	73fb      	strb	r3, [r7, #15]
    break;
 8003292:	e002      	b.n	800329a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003294:	2302      	movs	r3, #2
 8003296:	73fb      	strb	r3, [r7, #15]
    break;
 8003298:	bf00      	nop
  }
  return usb_status;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <malloc>:
 80032a8:	4b02      	ldr	r3, [pc, #8]	@ (80032b4 <malloc+0xc>)
 80032aa:	4601      	mov	r1, r0
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	f000 b825 	b.w	80032fc <_malloc_r>
 80032b2:	bf00      	nop
 80032b4:	20000018 	.word	0x20000018

080032b8 <sbrk_aligned>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4e0f      	ldr	r6, [pc, #60]	@ (80032f8 <sbrk_aligned+0x40>)
 80032bc:	460c      	mov	r4, r1
 80032be:	6831      	ldr	r1, [r6, #0]
 80032c0:	4605      	mov	r5, r0
 80032c2:	b911      	cbnz	r1, 80032ca <sbrk_aligned+0x12>
 80032c4:	f000 fb86 	bl	80039d4 <_sbrk_r>
 80032c8:	6030      	str	r0, [r6, #0]
 80032ca:	4621      	mov	r1, r4
 80032cc:	4628      	mov	r0, r5
 80032ce:	f000 fb81 	bl	80039d4 <_sbrk_r>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	d103      	bne.n	80032de <sbrk_aligned+0x26>
 80032d6:	f04f 34ff 	mov.w	r4, #4294967295
 80032da:	4620      	mov	r0, r4
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
 80032de:	1cc4      	adds	r4, r0, #3
 80032e0:	f024 0403 	bic.w	r4, r4, #3
 80032e4:	42a0      	cmp	r0, r4
 80032e6:	d0f8      	beq.n	80032da <sbrk_aligned+0x22>
 80032e8:	1a21      	subs	r1, r4, r0
 80032ea:	4628      	mov	r0, r5
 80032ec:	f000 fb72 	bl	80039d4 <_sbrk_r>
 80032f0:	3001      	adds	r0, #1
 80032f2:	d1f2      	bne.n	80032da <sbrk_aligned+0x22>
 80032f4:	e7ef      	b.n	80032d6 <sbrk_aligned+0x1e>
 80032f6:	bf00      	nop
 80032f8:	2000046c 	.word	0x2000046c

080032fc <_malloc_r>:
 80032fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003300:	1ccd      	adds	r5, r1, #3
 8003302:	f025 0503 	bic.w	r5, r5, #3
 8003306:	3508      	adds	r5, #8
 8003308:	2d0c      	cmp	r5, #12
 800330a:	bf38      	it	cc
 800330c:	250c      	movcc	r5, #12
 800330e:	2d00      	cmp	r5, #0
 8003310:	4606      	mov	r6, r0
 8003312:	db01      	blt.n	8003318 <_malloc_r+0x1c>
 8003314:	42a9      	cmp	r1, r5
 8003316:	d904      	bls.n	8003322 <_malloc_r+0x26>
 8003318:	230c      	movs	r3, #12
 800331a:	6033      	str	r3, [r6, #0]
 800331c:	2000      	movs	r0, #0
 800331e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033f8 <_malloc_r+0xfc>
 8003326:	f000 f869 	bl	80033fc <__malloc_lock>
 800332a:	f8d8 3000 	ldr.w	r3, [r8]
 800332e:	461c      	mov	r4, r3
 8003330:	bb44      	cbnz	r4, 8003384 <_malloc_r+0x88>
 8003332:	4629      	mov	r1, r5
 8003334:	4630      	mov	r0, r6
 8003336:	f7ff ffbf 	bl	80032b8 <sbrk_aligned>
 800333a:	1c43      	adds	r3, r0, #1
 800333c:	4604      	mov	r4, r0
 800333e:	d158      	bne.n	80033f2 <_malloc_r+0xf6>
 8003340:	f8d8 4000 	ldr.w	r4, [r8]
 8003344:	4627      	mov	r7, r4
 8003346:	2f00      	cmp	r7, #0
 8003348:	d143      	bne.n	80033d2 <_malloc_r+0xd6>
 800334a:	2c00      	cmp	r4, #0
 800334c:	d04b      	beq.n	80033e6 <_malloc_r+0xea>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	4639      	mov	r1, r7
 8003352:	4630      	mov	r0, r6
 8003354:	eb04 0903 	add.w	r9, r4, r3
 8003358:	f000 fb3c 	bl	80039d4 <_sbrk_r>
 800335c:	4581      	cmp	r9, r0
 800335e:	d142      	bne.n	80033e6 <_malloc_r+0xea>
 8003360:	6821      	ldr	r1, [r4, #0]
 8003362:	1a6d      	subs	r5, r5, r1
 8003364:	4629      	mov	r1, r5
 8003366:	4630      	mov	r0, r6
 8003368:	f7ff ffa6 	bl	80032b8 <sbrk_aligned>
 800336c:	3001      	adds	r0, #1
 800336e:	d03a      	beq.n	80033e6 <_malloc_r+0xea>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	442b      	add	r3, r5
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	f8d8 3000 	ldr.w	r3, [r8]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	bb62      	cbnz	r2, 80033d8 <_malloc_r+0xdc>
 800337e:	f8c8 7000 	str.w	r7, [r8]
 8003382:	e00f      	b.n	80033a4 <_malloc_r+0xa8>
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	1b52      	subs	r2, r2, r5
 8003388:	d420      	bmi.n	80033cc <_malloc_r+0xd0>
 800338a:	2a0b      	cmp	r2, #11
 800338c:	d917      	bls.n	80033be <_malloc_r+0xc2>
 800338e:	1961      	adds	r1, r4, r5
 8003390:	42a3      	cmp	r3, r4
 8003392:	6025      	str	r5, [r4, #0]
 8003394:	bf18      	it	ne
 8003396:	6059      	strne	r1, [r3, #4]
 8003398:	6863      	ldr	r3, [r4, #4]
 800339a:	bf08      	it	eq
 800339c:	f8c8 1000 	streq.w	r1, [r8]
 80033a0:	5162      	str	r2, [r4, r5]
 80033a2:	604b      	str	r3, [r1, #4]
 80033a4:	4630      	mov	r0, r6
 80033a6:	f000 f82f 	bl	8003408 <__malloc_unlock>
 80033aa:	f104 000b 	add.w	r0, r4, #11
 80033ae:	1d23      	adds	r3, r4, #4
 80033b0:	f020 0007 	bic.w	r0, r0, #7
 80033b4:	1ac2      	subs	r2, r0, r3
 80033b6:	bf1c      	itt	ne
 80033b8:	1a1b      	subne	r3, r3, r0
 80033ba:	50a3      	strne	r3, [r4, r2]
 80033bc:	e7af      	b.n	800331e <_malloc_r+0x22>
 80033be:	6862      	ldr	r2, [r4, #4]
 80033c0:	42a3      	cmp	r3, r4
 80033c2:	bf0c      	ite	eq
 80033c4:	f8c8 2000 	streq.w	r2, [r8]
 80033c8:	605a      	strne	r2, [r3, #4]
 80033ca:	e7eb      	b.n	80033a4 <_malloc_r+0xa8>
 80033cc:	4623      	mov	r3, r4
 80033ce:	6864      	ldr	r4, [r4, #4]
 80033d0:	e7ae      	b.n	8003330 <_malloc_r+0x34>
 80033d2:	463c      	mov	r4, r7
 80033d4:	687f      	ldr	r7, [r7, #4]
 80033d6:	e7b6      	b.n	8003346 <_malloc_r+0x4a>
 80033d8:	461a      	mov	r2, r3
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	42a3      	cmp	r3, r4
 80033de:	d1fb      	bne.n	80033d8 <_malloc_r+0xdc>
 80033e0:	2300      	movs	r3, #0
 80033e2:	6053      	str	r3, [r2, #4]
 80033e4:	e7de      	b.n	80033a4 <_malloc_r+0xa8>
 80033e6:	230c      	movs	r3, #12
 80033e8:	6033      	str	r3, [r6, #0]
 80033ea:	4630      	mov	r0, r6
 80033ec:	f000 f80c 	bl	8003408 <__malloc_unlock>
 80033f0:	e794      	b.n	800331c <_malloc_r+0x20>
 80033f2:	6005      	str	r5, [r0, #0]
 80033f4:	e7d6      	b.n	80033a4 <_malloc_r+0xa8>
 80033f6:	bf00      	nop
 80033f8:	20000470 	.word	0x20000470

080033fc <__malloc_lock>:
 80033fc:	4801      	ldr	r0, [pc, #4]	@ (8003404 <__malloc_lock+0x8>)
 80033fe:	f000 bb36 	b.w	8003a6e <__retarget_lock_acquire_recursive>
 8003402:	bf00      	nop
 8003404:	200005b4 	.word	0x200005b4

08003408 <__malloc_unlock>:
 8003408:	4801      	ldr	r0, [pc, #4]	@ (8003410 <__malloc_unlock+0x8>)
 800340a:	f000 bb31 	b.w	8003a70 <__retarget_lock_release_recursive>
 800340e:	bf00      	nop
 8003410:	200005b4 	.word	0x200005b4

08003414 <srand>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <srand+0x44>)
 8003418:	681d      	ldr	r5, [r3, #0]
 800341a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800341c:	4604      	mov	r4, r0
 800341e:	b9b3      	cbnz	r3, 800344e <srand+0x3a>
 8003420:	2018      	movs	r0, #24
 8003422:	f7ff ff41 	bl	80032a8 <malloc>
 8003426:	4602      	mov	r2, r0
 8003428:	6328      	str	r0, [r5, #48]	@ 0x30
 800342a:	b920      	cbnz	r0, 8003436 <srand+0x22>
 800342c:	4b0b      	ldr	r3, [pc, #44]	@ (800345c <srand+0x48>)
 800342e:	480c      	ldr	r0, [pc, #48]	@ (8003460 <srand+0x4c>)
 8003430:	2146      	movs	r1, #70	@ 0x46
 8003432:	f000 fb1f 	bl	8003a74 <__assert_func>
 8003436:	490b      	ldr	r1, [pc, #44]	@ (8003464 <srand+0x50>)
 8003438:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <srand+0x54>)
 800343a:	e9c0 1300 	strd	r1, r3, [r0]
 800343e:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <srand+0x58>)
 8003440:	6083      	str	r3, [r0, #8]
 8003442:	230b      	movs	r3, #11
 8003444:	8183      	strh	r3, [r0, #12]
 8003446:	2100      	movs	r1, #0
 8003448:	2001      	movs	r0, #1
 800344a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800344e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003450:	2200      	movs	r2, #0
 8003452:	611c      	str	r4, [r3, #16]
 8003454:	615a      	str	r2, [r3, #20]
 8003456:	bd38      	pop	{r3, r4, r5, pc}
 8003458:	20000018 	.word	0x20000018
 800345c:	0800449d 	.word	0x0800449d
 8003460:	080044b4 	.word	0x080044b4
 8003464:	abcd330e 	.word	0xabcd330e
 8003468:	e66d1234 	.word	0xe66d1234
 800346c:	0005deec 	.word	0x0005deec

08003470 <rand>:
 8003470:	4b16      	ldr	r3, [pc, #88]	@ (80034cc <rand+0x5c>)
 8003472:	b510      	push	{r4, lr}
 8003474:	681c      	ldr	r4, [r3, #0]
 8003476:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003478:	b9b3      	cbnz	r3, 80034a8 <rand+0x38>
 800347a:	2018      	movs	r0, #24
 800347c:	f7ff ff14 	bl	80032a8 <malloc>
 8003480:	4602      	mov	r2, r0
 8003482:	6320      	str	r0, [r4, #48]	@ 0x30
 8003484:	b920      	cbnz	r0, 8003490 <rand+0x20>
 8003486:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <rand+0x60>)
 8003488:	4812      	ldr	r0, [pc, #72]	@ (80034d4 <rand+0x64>)
 800348a:	2152      	movs	r1, #82	@ 0x52
 800348c:	f000 faf2 	bl	8003a74 <__assert_func>
 8003490:	4911      	ldr	r1, [pc, #68]	@ (80034d8 <rand+0x68>)
 8003492:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <rand+0x6c>)
 8003494:	e9c0 1300 	strd	r1, r3, [r0]
 8003498:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <rand+0x70>)
 800349a:	6083      	str	r3, [r0, #8]
 800349c:	230b      	movs	r3, #11
 800349e:	8183      	strh	r3, [r0, #12]
 80034a0:	2100      	movs	r1, #0
 80034a2:	2001      	movs	r0, #1
 80034a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80034a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80034aa:	480e      	ldr	r0, [pc, #56]	@ (80034e4 <rand+0x74>)
 80034ac:	690b      	ldr	r3, [r1, #16]
 80034ae:	694c      	ldr	r4, [r1, #20]
 80034b0:	4a0d      	ldr	r2, [pc, #52]	@ (80034e8 <rand+0x78>)
 80034b2:	4358      	muls	r0, r3
 80034b4:	fb02 0004 	mla	r0, r2, r4, r0
 80034b8:	fba3 3202 	umull	r3, r2, r3, r2
 80034bc:	3301      	adds	r3, #1
 80034be:	eb40 0002 	adc.w	r0, r0, r2
 80034c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80034c6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80034ca:	bd10      	pop	{r4, pc}
 80034cc:	20000018 	.word	0x20000018
 80034d0:	0800449d 	.word	0x0800449d
 80034d4:	080044b4 	.word	0x080044b4
 80034d8:	abcd330e 	.word	0xabcd330e
 80034dc:	e66d1234 	.word	0xe66d1234
 80034e0:	0005deec 	.word	0x0005deec
 80034e4:	5851f42d 	.word	0x5851f42d
 80034e8:	4c957f2d 	.word	0x4c957f2d

080034ec <std>:
 80034ec:	2300      	movs	r3, #0
 80034ee:	b510      	push	{r4, lr}
 80034f0:	4604      	mov	r4, r0
 80034f2:	e9c0 3300 	strd	r3, r3, [r0]
 80034f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034fa:	6083      	str	r3, [r0, #8]
 80034fc:	8181      	strh	r1, [r0, #12]
 80034fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8003500:	81c2      	strh	r2, [r0, #14]
 8003502:	6183      	str	r3, [r0, #24]
 8003504:	4619      	mov	r1, r3
 8003506:	2208      	movs	r2, #8
 8003508:	305c      	adds	r0, #92	@ 0x5c
 800350a:	f000 f9f9 	bl	8003900 <memset>
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <std+0x58>)
 8003510:	6263      	str	r3, [r4, #36]	@ 0x24
 8003512:	4b0d      	ldr	r3, [pc, #52]	@ (8003548 <std+0x5c>)
 8003514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <std+0x60>)
 8003518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <std+0x64>)
 800351c:	6323      	str	r3, [r4, #48]	@ 0x30
 800351e:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <std+0x68>)
 8003520:	6224      	str	r4, [r4, #32]
 8003522:	429c      	cmp	r4, r3
 8003524:	d006      	beq.n	8003534 <std+0x48>
 8003526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800352a:	4294      	cmp	r4, r2
 800352c:	d002      	beq.n	8003534 <std+0x48>
 800352e:	33d0      	adds	r3, #208	@ 0xd0
 8003530:	429c      	cmp	r4, r3
 8003532:	d105      	bne.n	8003540 <std+0x54>
 8003534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800353c:	f000 ba96 	b.w	8003a6c <__retarget_lock_init_recursive>
 8003540:	bd10      	pop	{r4, pc}
 8003542:	bf00      	nop
 8003544:	08003751 	.word	0x08003751
 8003548:	08003773 	.word	0x08003773
 800354c:	080037ab 	.word	0x080037ab
 8003550:	080037cf 	.word	0x080037cf
 8003554:	20000474 	.word	0x20000474

08003558 <stdio_exit_handler>:
 8003558:	4a02      	ldr	r2, [pc, #8]	@ (8003564 <stdio_exit_handler+0xc>)
 800355a:	4903      	ldr	r1, [pc, #12]	@ (8003568 <stdio_exit_handler+0x10>)
 800355c:	4803      	ldr	r0, [pc, #12]	@ (800356c <stdio_exit_handler+0x14>)
 800355e:	f000 b869 	b.w	8003634 <_fwalk_sglue>
 8003562:	bf00      	nop
 8003564:	2000000c 	.word	0x2000000c
 8003568:	080041ed 	.word	0x080041ed
 800356c:	2000001c 	.word	0x2000001c

08003570 <cleanup_stdio>:
 8003570:	6841      	ldr	r1, [r0, #4]
 8003572:	4b0c      	ldr	r3, [pc, #48]	@ (80035a4 <cleanup_stdio+0x34>)
 8003574:	4299      	cmp	r1, r3
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	d001      	beq.n	8003580 <cleanup_stdio+0x10>
 800357c:	f000 fe36 	bl	80041ec <_fflush_r>
 8003580:	68a1      	ldr	r1, [r4, #8]
 8003582:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <cleanup_stdio+0x38>)
 8003584:	4299      	cmp	r1, r3
 8003586:	d002      	beq.n	800358e <cleanup_stdio+0x1e>
 8003588:	4620      	mov	r0, r4
 800358a:	f000 fe2f 	bl	80041ec <_fflush_r>
 800358e:	68e1      	ldr	r1, [r4, #12]
 8003590:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <cleanup_stdio+0x3c>)
 8003592:	4299      	cmp	r1, r3
 8003594:	d004      	beq.n	80035a0 <cleanup_stdio+0x30>
 8003596:	4620      	mov	r0, r4
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359c:	f000 be26 	b.w	80041ec <_fflush_r>
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	bf00      	nop
 80035a4:	20000474 	.word	0x20000474
 80035a8:	200004dc 	.word	0x200004dc
 80035ac:	20000544 	.word	0x20000544

080035b0 <global_stdio_init.part.0>:
 80035b0:	b510      	push	{r4, lr}
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <global_stdio_init.part.0+0x30>)
 80035b4:	4c0b      	ldr	r4, [pc, #44]	@ (80035e4 <global_stdio_init.part.0+0x34>)
 80035b6:	4a0c      	ldr	r2, [pc, #48]	@ (80035e8 <global_stdio_init.part.0+0x38>)
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	4620      	mov	r0, r4
 80035bc:	2200      	movs	r2, #0
 80035be:	2104      	movs	r1, #4
 80035c0:	f7ff ff94 	bl	80034ec <std>
 80035c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035c8:	2201      	movs	r2, #1
 80035ca:	2109      	movs	r1, #9
 80035cc:	f7ff ff8e 	bl	80034ec <std>
 80035d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80035d4:	2202      	movs	r2, #2
 80035d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035da:	2112      	movs	r1, #18
 80035dc:	f7ff bf86 	b.w	80034ec <std>
 80035e0:	200005ac 	.word	0x200005ac
 80035e4:	20000474 	.word	0x20000474
 80035e8:	08003559 	.word	0x08003559

080035ec <__sfp_lock_acquire>:
 80035ec:	4801      	ldr	r0, [pc, #4]	@ (80035f4 <__sfp_lock_acquire+0x8>)
 80035ee:	f000 ba3e 	b.w	8003a6e <__retarget_lock_acquire_recursive>
 80035f2:	bf00      	nop
 80035f4:	200005b5 	.word	0x200005b5

080035f8 <__sfp_lock_release>:
 80035f8:	4801      	ldr	r0, [pc, #4]	@ (8003600 <__sfp_lock_release+0x8>)
 80035fa:	f000 ba39 	b.w	8003a70 <__retarget_lock_release_recursive>
 80035fe:	bf00      	nop
 8003600:	200005b5 	.word	0x200005b5

08003604 <__sinit>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	f7ff fff0 	bl	80035ec <__sfp_lock_acquire>
 800360c:	6a23      	ldr	r3, [r4, #32]
 800360e:	b11b      	cbz	r3, 8003618 <__sinit+0x14>
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	f7ff bff0 	b.w	80035f8 <__sfp_lock_release>
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <__sinit+0x28>)
 800361a:	6223      	str	r3, [r4, #32]
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <__sinit+0x2c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f5      	bne.n	8003610 <__sinit+0xc>
 8003624:	f7ff ffc4 	bl	80035b0 <global_stdio_init.part.0>
 8003628:	e7f2      	b.n	8003610 <__sinit+0xc>
 800362a:	bf00      	nop
 800362c:	08003571 	.word	0x08003571
 8003630:	200005ac 	.word	0x200005ac

08003634 <_fwalk_sglue>:
 8003634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003638:	4607      	mov	r7, r0
 800363a:	4688      	mov	r8, r1
 800363c:	4614      	mov	r4, r2
 800363e:	2600      	movs	r6, #0
 8003640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003644:	f1b9 0901 	subs.w	r9, r9, #1
 8003648:	d505      	bpl.n	8003656 <_fwalk_sglue+0x22>
 800364a:	6824      	ldr	r4, [r4, #0]
 800364c:	2c00      	cmp	r4, #0
 800364e:	d1f7      	bne.n	8003640 <_fwalk_sglue+0xc>
 8003650:	4630      	mov	r0, r6
 8003652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003656:	89ab      	ldrh	r3, [r5, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d907      	bls.n	800366c <_fwalk_sglue+0x38>
 800365c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003660:	3301      	adds	r3, #1
 8003662:	d003      	beq.n	800366c <_fwalk_sglue+0x38>
 8003664:	4629      	mov	r1, r5
 8003666:	4638      	mov	r0, r7
 8003668:	47c0      	blx	r8
 800366a:	4306      	orrs	r6, r0
 800366c:	3568      	adds	r5, #104	@ 0x68
 800366e:	e7e9      	b.n	8003644 <_fwalk_sglue+0x10>

08003670 <iprintf>:
 8003670:	b40f      	push	{r0, r1, r2, r3}
 8003672:	b507      	push	{r0, r1, r2, lr}
 8003674:	4906      	ldr	r1, [pc, #24]	@ (8003690 <iprintf+0x20>)
 8003676:	ab04      	add	r3, sp, #16
 8003678:	6808      	ldr	r0, [r1, #0]
 800367a:	f853 2b04 	ldr.w	r2, [r3], #4
 800367e:	6881      	ldr	r1, [r0, #8]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	f000 fa89 	bl	8003b98 <_vfiprintf_r>
 8003686:	b003      	add	sp, #12
 8003688:	f85d eb04 	ldr.w	lr, [sp], #4
 800368c:	b004      	add	sp, #16
 800368e:	4770      	bx	lr
 8003690:	20000018 	.word	0x20000018

08003694 <_puts_r>:
 8003694:	6a03      	ldr	r3, [r0, #32]
 8003696:	b570      	push	{r4, r5, r6, lr}
 8003698:	6884      	ldr	r4, [r0, #8]
 800369a:	4605      	mov	r5, r0
 800369c:	460e      	mov	r6, r1
 800369e:	b90b      	cbnz	r3, 80036a4 <_puts_r+0x10>
 80036a0:	f7ff ffb0 	bl	8003604 <__sinit>
 80036a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036a6:	07db      	lsls	r3, r3, #31
 80036a8:	d405      	bmi.n	80036b6 <_puts_r+0x22>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	0598      	lsls	r0, r3, #22
 80036ae:	d402      	bmi.n	80036b6 <_puts_r+0x22>
 80036b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036b2:	f000 f9dc 	bl	8003a6e <__retarget_lock_acquire_recursive>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	0719      	lsls	r1, r3, #28
 80036ba:	d502      	bpl.n	80036c2 <_puts_r+0x2e>
 80036bc:	6923      	ldr	r3, [r4, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d135      	bne.n	800372e <_puts_r+0x9a>
 80036c2:	4621      	mov	r1, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f8c5 	bl	8003854 <__swsetup_r>
 80036ca:	b380      	cbz	r0, 800372e <_puts_r+0x9a>
 80036cc:	f04f 35ff 	mov.w	r5, #4294967295
 80036d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036d2:	07da      	lsls	r2, r3, #31
 80036d4:	d405      	bmi.n	80036e2 <_puts_r+0x4e>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	059b      	lsls	r3, r3, #22
 80036da:	d402      	bmi.n	80036e2 <_puts_r+0x4e>
 80036dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036de:	f000 f9c7 	bl	8003a70 <__retarget_lock_release_recursive>
 80036e2:	4628      	mov	r0, r5
 80036e4:	bd70      	pop	{r4, r5, r6, pc}
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da04      	bge.n	80036f4 <_puts_r+0x60>
 80036ea:	69a2      	ldr	r2, [r4, #24]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	dc17      	bgt.n	8003720 <_puts_r+0x8c>
 80036f0:	290a      	cmp	r1, #10
 80036f2:	d015      	beq.n	8003720 <_puts_r+0x8c>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	6022      	str	r2, [r4, #0]
 80036fa:	7019      	strb	r1, [r3, #0]
 80036fc:	68a3      	ldr	r3, [r4, #8]
 80036fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003702:	3b01      	subs	r3, #1
 8003704:	60a3      	str	r3, [r4, #8]
 8003706:	2900      	cmp	r1, #0
 8003708:	d1ed      	bne.n	80036e6 <_puts_r+0x52>
 800370a:	2b00      	cmp	r3, #0
 800370c:	da11      	bge.n	8003732 <_puts_r+0x9e>
 800370e:	4622      	mov	r2, r4
 8003710:	210a      	movs	r1, #10
 8003712:	4628      	mov	r0, r5
 8003714:	f000 f85f 	bl	80037d6 <__swbuf_r>
 8003718:	3001      	adds	r0, #1
 800371a:	d0d7      	beq.n	80036cc <_puts_r+0x38>
 800371c:	250a      	movs	r5, #10
 800371e:	e7d7      	b.n	80036d0 <_puts_r+0x3c>
 8003720:	4622      	mov	r2, r4
 8003722:	4628      	mov	r0, r5
 8003724:	f000 f857 	bl	80037d6 <__swbuf_r>
 8003728:	3001      	adds	r0, #1
 800372a:	d1e7      	bne.n	80036fc <_puts_r+0x68>
 800372c:	e7ce      	b.n	80036cc <_puts_r+0x38>
 800372e:	3e01      	subs	r6, #1
 8003730:	e7e4      	b.n	80036fc <_puts_r+0x68>
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	6022      	str	r2, [r4, #0]
 8003738:	220a      	movs	r2, #10
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e7ee      	b.n	800371c <_puts_r+0x88>
	...

08003740 <puts>:
 8003740:	4b02      	ldr	r3, [pc, #8]	@ (800374c <puts+0xc>)
 8003742:	4601      	mov	r1, r0
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	f7ff bfa5 	b.w	8003694 <_puts_r>
 800374a:	bf00      	nop
 800374c:	20000018 	.word	0x20000018

08003750 <__sread>:
 8003750:	b510      	push	{r4, lr}
 8003752:	460c      	mov	r4, r1
 8003754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003758:	f000 f92a 	bl	80039b0 <_read_r>
 800375c:	2800      	cmp	r0, #0
 800375e:	bfab      	itete	ge
 8003760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003762:	89a3      	ldrhlt	r3, [r4, #12]
 8003764:	181b      	addge	r3, r3, r0
 8003766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800376a:	bfac      	ite	ge
 800376c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800376e:	81a3      	strhlt	r3, [r4, #12]
 8003770:	bd10      	pop	{r4, pc}

08003772 <__swrite>:
 8003772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003776:	461f      	mov	r7, r3
 8003778:	898b      	ldrh	r3, [r1, #12]
 800377a:	05db      	lsls	r3, r3, #23
 800377c:	4605      	mov	r5, r0
 800377e:	460c      	mov	r4, r1
 8003780:	4616      	mov	r6, r2
 8003782:	d505      	bpl.n	8003790 <__swrite+0x1e>
 8003784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003788:	2302      	movs	r3, #2
 800378a:	2200      	movs	r2, #0
 800378c:	f000 f8fe 	bl	800398c <_lseek_r>
 8003790:	89a3      	ldrh	r3, [r4, #12]
 8003792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800379a:	81a3      	strh	r3, [r4, #12]
 800379c:	4632      	mov	r2, r6
 800379e:	463b      	mov	r3, r7
 80037a0:	4628      	mov	r0, r5
 80037a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037a6:	f000 b925 	b.w	80039f4 <_write_r>

080037aa <__sseek>:
 80037aa:	b510      	push	{r4, lr}
 80037ac:	460c      	mov	r4, r1
 80037ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b2:	f000 f8eb 	bl	800398c <_lseek_r>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	bf15      	itete	ne
 80037bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037c6:	81a3      	strheq	r3, [r4, #12]
 80037c8:	bf18      	it	ne
 80037ca:	81a3      	strhne	r3, [r4, #12]
 80037cc:	bd10      	pop	{r4, pc}

080037ce <__sclose>:
 80037ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d2:	f000 b8b9 	b.w	8003948 <_close_r>

080037d6 <__swbuf_r>:
 80037d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d8:	460e      	mov	r6, r1
 80037da:	4614      	mov	r4, r2
 80037dc:	4605      	mov	r5, r0
 80037de:	b118      	cbz	r0, 80037e8 <__swbuf_r+0x12>
 80037e0:	6a03      	ldr	r3, [r0, #32]
 80037e2:	b90b      	cbnz	r3, 80037e8 <__swbuf_r+0x12>
 80037e4:	f7ff ff0e 	bl	8003604 <__sinit>
 80037e8:	69a3      	ldr	r3, [r4, #24]
 80037ea:	60a3      	str	r3, [r4, #8]
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	071a      	lsls	r2, r3, #28
 80037f0:	d501      	bpl.n	80037f6 <__swbuf_r+0x20>
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	b943      	cbnz	r3, 8003808 <__swbuf_r+0x32>
 80037f6:	4621      	mov	r1, r4
 80037f8:	4628      	mov	r0, r5
 80037fa:	f000 f82b 	bl	8003854 <__swsetup_r>
 80037fe:	b118      	cbz	r0, 8003808 <__swbuf_r+0x32>
 8003800:	f04f 37ff 	mov.w	r7, #4294967295
 8003804:	4638      	mov	r0, r7
 8003806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	6922      	ldr	r2, [r4, #16]
 800380c:	1a98      	subs	r0, r3, r2
 800380e:	6963      	ldr	r3, [r4, #20]
 8003810:	b2f6      	uxtb	r6, r6
 8003812:	4283      	cmp	r3, r0
 8003814:	4637      	mov	r7, r6
 8003816:	dc05      	bgt.n	8003824 <__swbuf_r+0x4e>
 8003818:	4621      	mov	r1, r4
 800381a:	4628      	mov	r0, r5
 800381c:	f000 fce6 	bl	80041ec <_fflush_r>
 8003820:	2800      	cmp	r0, #0
 8003822:	d1ed      	bne.n	8003800 <__swbuf_r+0x2a>
 8003824:	68a3      	ldr	r3, [r4, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	60a3      	str	r3, [r4, #8]
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	6022      	str	r2, [r4, #0]
 8003830:	701e      	strb	r6, [r3, #0]
 8003832:	6962      	ldr	r2, [r4, #20]
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	429a      	cmp	r2, r3
 8003838:	d004      	beq.n	8003844 <__swbuf_r+0x6e>
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	07db      	lsls	r3, r3, #31
 800383e:	d5e1      	bpl.n	8003804 <__swbuf_r+0x2e>
 8003840:	2e0a      	cmp	r6, #10
 8003842:	d1df      	bne.n	8003804 <__swbuf_r+0x2e>
 8003844:	4621      	mov	r1, r4
 8003846:	4628      	mov	r0, r5
 8003848:	f000 fcd0 	bl	80041ec <_fflush_r>
 800384c:	2800      	cmp	r0, #0
 800384e:	d0d9      	beq.n	8003804 <__swbuf_r+0x2e>
 8003850:	e7d6      	b.n	8003800 <__swbuf_r+0x2a>
	...

08003854 <__swsetup_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <__swsetup_r+0xa8>)
 8003858:	4605      	mov	r5, r0
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	460c      	mov	r4, r1
 800385e:	b118      	cbz	r0, 8003868 <__swsetup_r+0x14>
 8003860:	6a03      	ldr	r3, [r0, #32]
 8003862:	b90b      	cbnz	r3, 8003868 <__swsetup_r+0x14>
 8003864:	f7ff fece 	bl	8003604 <__sinit>
 8003868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800386c:	0719      	lsls	r1, r3, #28
 800386e:	d422      	bmi.n	80038b6 <__swsetup_r+0x62>
 8003870:	06da      	lsls	r2, r3, #27
 8003872:	d407      	bmi.n	8003884 <__swsetup_r+0x30>
 8003874:	2209      	movs	r2, #9
 8003876:	602a      	str	r2, [r5, #0]
 8003878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	f04f 30ff 	mov.w	r0, #4294967295
 8003882:	e033      	b.n	80038ec <__swsetup_r+0x98>
 8003884:	0758      	lsls	r0, r3, #29
 8003886:	d512      	bpl.n	80038ae <__swsetup_r+0x5a>
 8003888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800388a:	b141      	cbz	r1, 800389e <__swsetup_r+0x4a>
 800388c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003890:	4299      	cmp	r1, r3
 8003892:	d002      	beq.n	800389a <__swsetup_r+0x46>
 8003894:	4628      	mov	r0, r5
 8003896:	f000 f90b 	bl	8003ab0 <_free_r>
 800389a:	2300      	movs	r3, #0
 800389c:	6363      	str	r3, [r4, #52]	@ 0x34
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038a4:	81a3      	strh	r3, [r4, #12]
 80038a6:	2300      	movs	r3, #0
 80038a8:	6063      	str	r3, [r4, #4]
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	b94b      	cbnz	r3, 80038ce <__swsetup_r+0x7a>
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c4:	d003      	beq.n	80038ce <__swsetup_r+0x7a>
 80038c6:	4621      	mov	r1, r4
 80038c8:	4628      	mov	r0, r5
 80038ca:	f000 fcef 	bl	80042ac <__smakebuf_r>
 80038ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038d2:	f013 0201 	ands.w	r2, r3, #1
 80038d6:	d00a      	beq.n	80038ee <__swsetup_r+0x9a>
 80038d8:	2200      	movs	r2, #0
 80038da:	60a2      	str	r2, [r4, #8]
 80038dc:	6962      	ldr	r2, [r4, #20]
 80038de:	4252      	negs	r2, r2
 80038e0:	61a2      	str	r2, [r4, #24]
 80038e2:	6922      	ldr	r2, [r4, #16]
 80038e4:	b942      	cbnz	r2, 80038f8 <__swsetup_r+0xa4>
 80038e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80038ea:	d1c5      	bne.n	8003878 <__swsetup_r+0x24>
 80038ec:	bd38      	pop	{r3, r4, r5, pc}
 80038ee:	0799      	lsls	r1, r3, #30
 80038f0:	bf58      	it	pl
 80038f2:	6962      	ldrpl	r2, [r4, #20]
 80038f4:	60a2      	str	r2, [r4, #8]
 80038f6:	e7f4      	b.n	80038e2 <__swsetup_r+0x8e>
 80038f8:	2000      	movs	r0, #0
 80038fa:	e7f7      	b.n	80038ec <__swsetup_r+0x98>
 80038fc:	20000018 	.word	0x20000018

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <time>:
 8003910:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003912:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <time+0x34>)
 8003914:	f04f 36ff 	mov.w	r6, #4294967295
 8003918:	f04f 37ff 	mov.w	r7, #4294967295
 800391c:	4669      	mov	r1, sp
 800391e:	4604      	mov	r4, r0
 8003920:	2200      	movs	r2, #0
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	e9cd 6700 	strd	r6, r7, [sp]
 8003928:	f000 f81e 	bl	8003968 <_gettimeofday_r>
 800392c:	2800      	cmp	r0, #0
 800392e:	bfb8      	it	lt
 8003930:	e9cd 6700 	strdlt	r6, r7, [sp]
 8003934:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003938:	b10c      	cbz	r4, 800393e <time+0x2e>
 800393a:	e9c4 0100 	strd	r0, r1, [r4]
 800393e:	b004      	add	sp, #16
 8003940:	bdd0      	pop	{r4, r6, r7, pc}
 8003942:	bf00      	nop
 8003944:	20000018 	.word	0x20000018

08003948 <_close_r>:
 8003948:	b538      	push	{r3, r4, r5, lr}
 800394a:	4d06      	ldr	r5, [pc, #24]	@ (8003964 <_close_r+0x1c>)
 800394c:	2300      	movs	r3, #0
 800394e:	4604      	mov	r4, r0
 8003950:	4608      	mov	r0, r1
 8003952:	602b      	str	r3, [r5, #0]
 8003954:	f7fc febc 	bl	80006d0 <_close>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d102      	bne.n	8003962 <_close_r+0x1a>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	b103      	cbz	r3, 8003962 <_close_r+0x1a>
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	200005b0 	.word	0x200005b0

08003968 <_gettimeofday_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4d07      	ldr	r5, [pc, #28]	@ (8003988 <_gettimeofday_r+0x20>)
 800396c:	2300      	movs	r3, #0
 800396e:	4604      	mov	r4, r0
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	602b      	str	r3, [r5, #0]
 8003976:	f000 fd43 	bl	8004400 <_gettimeofday>
 800397a:	1c43      	adds	r3, r0, #1
 800397c:	d102      	bne.n	8003984 <_gettimeofday_r+0x1c>
 800397e:	682b      	ldr	r3, [r5, #0]
 8003980:	b103      	cbz	r3, 8003984 <_gettimeofday_r+0x1c>
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	bd38      	pop	{r3, r4, r5, pc}
 8003986:	bf00      	nop
 8003988:	200005b0 	.word	0x200005b0

0800398c <_lseek_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4d07      	ldr	r5, [pc, #28]	@ (80039ac <_lseek_r+0x20>)
 8003990:	4604      	mov	r4, r0
 8003992:	4608      	mov	r0, r1
 8003994:	4611      	mov	r1, r2
 8003996:	2200      	movs	r2, #0
 8003998:	602a      	str	r2, [r5, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f7fc febf 	bl	800071e <_lseek>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_lseek_r+0x1e>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_lseek_r+0x1e>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	200005b0 	.word	0x200005b0

080039b0 <_read_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4d07      	ldr	r5, [pc, #28]	@ (80039d0 <_read_r+0x20>)
 80039b4:	4604      	mov	r4, r0
 80039b6:	4608      	mov	r0, r1
 80039b8:	4611      	mov	r1, r2
 80039ba:	2200      	movs	r2, #0
 80039bc:	602a      	str	r2, [r5, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7fc fe4d 	bl	800065e <_read>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_read_r+0x1e>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_read_r+0x1e>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	200005b0 	.word	0x200005b0

080039d4 <_sbrk_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4d06      	ldr	r5, [pc, #24]	@ (80039f0 <_sbrk_r+0x1c>)
 80039d8:	2300      	movs	r3, #0
 80039da:	4604      	mov	r4, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	602b      	str	r3, [r5, #0]
 80039e0:	f7fc feaa 	bl	8000738 <_sbrk>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_sbrk_r+0x1a>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_sbrk_r+0x1a>
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	200005b0 	.word	0x200005b0

080039f4 <_write_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	4d07      	ldr	r5, [pc, #28]	@ (8003a14 <_write_r+0x20>)
 80039f8:	4604      	mov	r4, r0
 80039fa:	4608      	mov	r0, r1
 80039fc:	4611      	mov	r1, r2
 80039fe:	2200      	movs	r2, #0
 8003a00:	602a      	str	r2, [r5, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f7fc fe48 	bl	8000698 <_write>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d102      	bne.n	8003a12 <_write_r+0x1e>
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	b103      	cbz	r3, 8003a12 <_write_r+0x1e>
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	bd38      	pop	{r3, r4, r5, pc}
 8003a14:	200005b0 	.word	0x200005b0

08003a18 <__errno>:
 8003a18:	4b01      	ldr	r3, [pc, #4]	@ (8003a20 <__errno+0x8>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000018 	.word	0x20000018

08003a24 <__libc_init_array>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4d0d      	ldr	r5, [pc, #52]	@ (8003a5c <__libc_init_array+0x38>)
 8003a28:	4c0d      	ldr	r4, [pc, #52]	@ (8003a60 <__libc_init_array+0x3c>)
 8003a2a:	1b64      	subs	r4, r4, r5
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	2600      	movs	r6, #0
 8003a30:	42a6      	cmp	r6, r4
 8003a32:	d109      	bne.n	8003a48 <__libc_init_array+0x24>
 8003a34:	4d0b      	ldr	r5, [pc, #44]	@ (8003a64 <__libc_init_array+0x40>)
 8003a36:	4c0c      	ldr	r4, [pc, #48]	@ (8003a68 <__libc_init_array+0x44>)
 8003a38:	f000 fcea 	bl	8004410 <_init>
 8003a3c:	1b64      	subs	r4, r4, r5
 8003a3e:	10a4      	asrs	r4, r4, #2
 8003a40:	2600      	movs	r6, #0
 8003a42:	42a6      	cmp	r6, r4
 8003a44:	d105      	bne.n	8003a52 <__libc_init_array+0x2e>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4c:	4798      	blx	r3
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7ee      	b.n	8003a30 <__libc_init_array+0xc>
 8003a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a56:	4798      	blx	r3
 8003a58:	3601      	adds	r6, #1
 8003a5a:	e7f2      	b.n	8003a42 <__libc_init_array+0x1e>
 8003a5c:	08004584 	.word	0x08004584
 8003a60:	08004584 	.word	0x08004584
 8003a64:	08004584 	.word	0x08004584
 8003a68:	08004588 	.word	0x08004588

08003a6c <__retarget_lock_init_recursive>:
 8003a6c:	4770      	bx	lr

08003a6e <__retarget_lock_acquire_recursive>:
 8003a6e:	4770      	bx	lr

08003a70 <__retarget_lock_release_recursive>:
 8003a70:	4770      	bx	lr
	...

08003a74 <__assert_func>:
 8003a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a76:	4614      	mov	r4, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <__assert_func+0x2c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4605      	mov	r5, r0
 8003a80:	68d8      	ldr	r0, [r3, #12]
 8003a82:	b954      	cbnz	r4, 8003a9a <__assert_func+0x26>
 8003a84:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <__assert_func+0x30>)
 8003a86:	461c      	mov	r4, r3
 8003a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a8c:	9100      	str	r1, [sp, #0]
 8003a8e:	462b      	mov	r3, r5
 8003a90:	4905      	ldr	r1, [pc, #20]	@ (8003aa8 <__assert_func+0x34>)
 8003a92:	f000 fbd3 	bl	800423c <fiprintf>
 8003a96:	f000 fc67 	bl	8004368 <abort>
 8003a9a:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <__assert_func+0x38>)
 8003a9c:	e7f4      	b.n	8003a88 <__assert_func+0x14>
 8003a9e:	bf00      	nop
 8003aa0:	20000018 	.word	0x20000018
 8003aa4:	08004547 	.word	0x08004547
 8003aa8:	08004519 	.word	0x08004519
 8003aac:	0800450c 	.word	0x0800450c

08003ab0 <_free_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4605      	mov	r5, r0
 8003ab4:	2900      	cmp	r1, #0
 8003ab6:	d041      	beq.n	8003b3c <_free_r+0x8c>
 8003ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003abc:	1f0c      	subs	r4, r1, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	bfb8      	it	lt
 8003ac2:	18e4      	addlt	r4, r4, r3
 8003ac4:	f7ff fc9a 	bl	80033fc <__malloc_lock>
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b40 <_free_r+0x90>)
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	b933      	cbnz	r3, 8003adc <_free_r+0x2c>
 8003ace:	6063      	str	r3, [r4, #4]
 8003ad0:	6014      	str	r4, [r2, #0]
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ad8:	f7ff bc96 	b.w	8003408 <__malloc_unlock>
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	d908      	bls.n	8003af2 <_free_r+0x42>
 8003ae0:	6820      	ldr	r0, [r4, #0]
 8003ae2:	1821      	adds	r1, r4, r0
 8003ae4:	428b      	cmp	r3, r1
 8003ae6:	bf01      	itttt	eq
 8003ae8:	6819      	ldreq	r1, [r3, #0]
 8003aea:	685b      	ldreq	r3, [r3, #4]
 8003aec:	1809      	addeq	r1, r1, r0
 8003aee:	6021      	streq	r1, [r4, #0]
 8003af0:	e7ed      	b.n	8003ace <_free_r+0x1e>
 8003af2:	461a      	mov	r2, r3
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	b10b      	cbz	r3, 8003afc <_free_r+0x4c>
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	d9fa      	bls.n	8003af2 <_free_r+0x42>
 8003afc:	6811      	ldr	r1, [r2, #0]
 8003afe:	1850      	adds	r0, r2, r1
 8003b00:	42a0      	cmp	r0, r4
 8003b02:	d10b      	bne.n	8003b1c <_free_r+0x6c>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	4401      	add	r1, r0
 8003b08:	1850      	adds	r0, r2, r1
 8003b0a:	4283      	cmp	r3, r0
 8003b0c:	6011      	str	r1, [r2, #0]
 8003b0e:	d1e0      	bne.n	8003ad2 <_free_r+0x22>
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	6053      	str	r3, [r2, #4]
 8003b16:	4408      	add	r0, r1
 8003b18:	6010      	str	r0, [r2, #0]
 8003b1a:	e7da      	b.n	8003ad2 <_free_r+0x22>
 8003b1c:	d902      	bls.n	8003b24 <_free_r+0x74>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	602b      	str	r3, [r5, #0]
 8003b22:	e7d6      	b.n	8003ad2 <_free_r+0x22>
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	1821      	adds	r1, r4, r0
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	bf04      	itt	eq
 8003b2c:	6819      	ldreq	r1, [r3, #0]
 8003b2e:	685b      	ldreq	r3, [r3, #4]
 8003b30:	6063      	str	r3, [r4, #4]
 8003b32:	bf04      	itt	eq
 8003b34:	1809      	addeq	r1, r1, r0
 8003b36:	6021      	streq	r1, [r4, #0]
 8003b38:	6054      	str	r4, [r2, #4]
 8003b3a:	e7ca      	b.n	8003ad2 <_free_r+0x22>
 8003b3c:	bd38      	pop	{r3, r4, r5, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000470 	.word	0x20000470

08003b44 <__sfputc_r>:
 8003b44:	6893      	ldr	r3, [r2, #8]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	b410      	push	{r4}
 8003b4c:	6093      	str	r3, [r2, #8]
 8003b4e:	da08      	bge.n	8003b62 <__sfputc_r+0x1e>
 8003b50:	6994      	ldr	r4, [r2, #24]
 8003b52:	42a3      	cmp	r3, r4
 8003b54:	db01      	blt.n	8003b5a <__sfputc_r+0x16>
 8003b56:	290a      	cmp	r1, #10
 8003b58:	d103      	bne.n	8003b62 <__sfputc_r+0x1e>
 8003b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b5e:	f7ff be3a 	b.w	80037d6 <__swbuf_r>
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	1c58      	adds	r0, r3, #1
 8003b66:	6010      	str	r0, [r2, #0]
 8003b68:	7019      	strb	r1, [r3, #0]
 8003b6a:	4608      	mov	r0, r1
 8003b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <__sfputs_r>:
 8003b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b74:	4606      	mov	r6, r0
 8003b76:	460f      	mov	r7, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	18d5      	adds	r5, r2, r3
 8003b7c:	42ac      	cmp	r4, r5
 8003b7e:	d101      	bne.n	8003b84 <__sfputs_r+0x12>
 8003b80:	2000      	movs	r0, #0
 8003b82:	e007      	b.n	8003b94 <__sfputs_r+0x22>
 8003b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b88:	463a      	mov	r2, r7
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f7ff ffda 	bl	8003b44 <__sfputc_r>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d1f3      	bne.n	8003b7c <__sfputs_r+0xa>
 8003b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b98 <_vfiprintf_r>:
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	460d      	mov	r5, r1
 8003b9e:	b09d      	sub	sp, #116	@ 0x74
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	4698      	mov	r8, r3
 8003ba4:	4606      	mov	r6, r0
 8003ba6:	b118      	cbz	r0, 8003bb0 <_vfiprintf_r+0x18>
 8003ba8:	6a03      	ldr	r3, [r0, #32]
 8003baa:	b90b      	cbnz	r3, 8003bb0 <_vfiprintf_r+0x18>
 8003bac:	f7ff fd2a 	bl	8003604 <__sinit>
 8003bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bb2:	07d9      	lsls	r1, r3, #31
 8003bb4:	d405      	bmi.n	8003bc2 <_vfiprintf_r+0x2a>
 8003bb6:	89ab      	ldrh	r3, [r5, #12]
 8003bb8:	059a      	lsls	r2, r3, #22
 8003bba:	d402      	bmi.n	8003bc2 <_vfiprintf_r+0x2a>
 8003bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bbe:	f7ff ff56 	bl	8003a6e <__retarget_lock_acquire_recursive>
 8003bc2:	89ab      	ldrh	r3, [r5, #12]
 8003bc4:	071b      	lsls	r3, r3, #28
 8003bc6:	d501      	bpl.n	8003bcc <_vfiprintf_r+0x34>
 8003bc8:	692b      	ldr	r3, [r5, #16]
 8003bca:	b99b      	cbnz	r3, 8003bf4 <_vfiprintf_r+0x5c>
 8003bcc:	4629      	mov	r1, r5
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f7ff fe40 	bl	8003854 <__swsetup_r>
 8003bd4:	b170      	cbz	r0, 8003bf4 <_vfiprintf_r+0x5c>
 8003bd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bd8:	07dc      	lsls	r4, r3, #31
 8003bda:	d504      	bpl.n	8003be6 <_vfiprintf_r+0x4e>
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	b01d      	add	sp, #116	@ 0x74
 8003be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be6:	89ab      	ldrh	r3, [r5, #12]
 8003be8:	0598      	lsls	r0, r3, #22
 8003bea:	d4f7      	bmi.n	8003bdc <_vfiprintf_r+0x44>
 8003bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bee:	f7ff ff3f 	bl	8003a70 <__retarget_lock_release_recursive>
 8003bf2:	e7f3      	b.n	8003bdc <_vfiprintf_r+0x44>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c02:	2330      	movs	r3, #48	@ 0x30
 8003c04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003db4 <_vfiprintf_r+0x21c>
 8003c08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c0c:	f04f 0901 	mov.w	r9, #1
 8003c10:	4623      	mov	r3, r4
 8003c12:	469a      	mov	sl, r3
 8003c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c18:	b10a      	cbz	r2, 8003c1e <_vfiprintf_r+0x86>
 8003c1a:	2a25      	cmp	r2, #37	@ 0x25
 8003c1c:	d1f9      	bne.n	8003c12 <_vfiprintf_r+0x7a>
 8003c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8003c22:	d00b      	beq.n	8003c3c <_vfiprintf_r+0xa4>
 8003c24:	465b      	mov	r3, fp
 8003c26:	4622      	mov	r2, r4
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	f7ff ffa1 	bl	8003b72 <__sfputs_r>
 8003c30:	3001      	adds	r0, #1
 8003c32:	f000 80a7 	beq.w	8003d84 <_vfiprintf_r+0x1ec>
 8003c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c38:	445a      	add	r2, fp
 8003c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 809f 	beq.w	8003d84 <_vfiprintf_r+0x1ec>
 8003c46:	2300      	movs	r3, #0
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c50:	f10a 0a01 	add.w	sl, sl, #1
 8003c54:	9304      	str	r3, [sp, #16]
 8003c56:	9307      	str	r3, [sp, #28]
 8003c58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c5e:	4654      	mov	r4, sl
 8003c60:	2205      	movs	r2, #5
 8003c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c66:	4853      	ldr	r0, [pc, #332]	@ (8003db4 <_vfiprintf_r+0x21c>)
 8003c68:	f7fc fab2 	bl	80001d0 <memchr>
 8003c6c:	9a04      	ldr	r2, [sp, #16]
 8003c6e:	b9d8      	cbnz	r0, 8003ca8 <_vfiprintf_r+0x110>
 8003c70:	06d1      	lsls	r1, r2, #27
 8003c72:	bf44      	itt	mi
 8003c74:	2320      	movmi	r3, #32
 8003c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c7a:	0713      	lsls	r3, r2, #28
 8003c7c:	bf44      	itt	mi
 8003c7e:	232b      	movmi	r3, #43	@ 0x2b
 8003c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c84:	f89a 3000 	ldrb.w	r3, [sl]
 8003c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c8a:	d015      	beq.n	8003cb8 <_vfiprintf_r+0x120>
 8003c8c:	9a07      	ldr	r2, [sp, #28]
 8003c8e:	4654      	mov	r4, sl
 8003c90:	2000      	movs	r0, #0
 8003c92:	f04f 0c0a 	mov.w	ip, #10
 8003c96:	4621      	mov	r1, r4
 8003c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c9c:	3b30      	subs	r3, #48	@ 0x30
 8003c9e:	2b09      	cmp	r3, #9
 8003ca0:	d94b      	bls.n	8003d3a <_vfiprintf_r+0x1a2>
 8003ca2:	b1b0      	cbz	r0, 8003cd2 <_vfiprintf_r+0x13a>
 8003ca4:	9207      	str	r2, [sp, #28]
 8003ca6:	e014      	b.n	8003cd2 <_vfiprintf_r+0x13a>
 8003ca8:	eba0 0308 	sub.w	r3, r0, r8
 8003cac:	fa09 f303 	lsl.w	r3, r9, r3
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	9304      	str	r3, [sp, #16]
 8003cb4:	46a2      	mov	sl, r4
 8003cb6:	e7d2      	b.n	8003c5e <_vfiprintf_r+0xc6>
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	1d19      	adds	r1, r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	9103      	str	r1, [sp, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bfbb      	ittet	lt
 8003cc4:	425b      	neglt	r3, r3
 8003cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8003cca:	9307      	strge	r3, [sp, #28]
 8003ccc:	9307      	strlt	r3, [sp, #28]
 8003cce:	bfb8      	it	lt
 8003cd0:	9204      	strlt	r2, [sp, #16]
 8003cd2:	7823      	ldrb	r3, [r4, #0]
 8003cd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cd6:	d10a      	bne.n	8003cee <_vfiprintf_r+0x156>
 8003cd8:	7863      	ldrb	r3, [r4, #1]
 8003cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cdc:	d132      	bne.n	8003d44 <_vfiprintf_r+0x1ac>
 8003cde:	9b03      	ldr	r3, [sp, #12]
 8003ce0:	1d1a      	adds	r2, r3, #4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	9203      	str	r2, [sp, #12]
 8003ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cea:	3402      	adds	r4, #2
 8003cec:	9305      	str	r3, [sp, #20]
 8003cee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003dc4 <_vfiprintf_r+0x22c>
 8003cf2:	7821      	ldrb	r1, [r4, #0]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	4650      	mov	r0, sl
 8003cf8:	f7fc fa6a 	bl	80001d0 <memchr>
 8003cfc:	b138      	cbz	r0, 8003d0e <_vfiprintf_r+0x176>
 8003cfe:	9b04      	ldr	r3, [sp, #16]
 8003d00:	eba0 000a 	sub.w	r0, r0, sl
 8003d04:	2240      	movs	r2, #64	@ 0x40
 8003d06:	4082      	lsls	r2, r0
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	3401      	adds	r4, #1
 8003d0c:	9304      	str	r3, [sp, #16]
 8003d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d12:	4829      	ldr	r0, [pc, #164]	@ (8003db8 <_vfiprintf_r+0x220>)
 8003d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d18:	2206      	movs	r2, #6
 8003d1a:	f7fc fa59 	bl	80001d0 <memchr>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d03f      	beq.n	8003da2 <_vfiprintf_r+0x20a>
 8003d22:	4b26      	ldr	r3, [pc, #152]	@ (8003dbc <_vfiprintf_r+0x224>)
 8003d24:	bb1b      	cbnz	r3, 8003d6e <_vfiprintf_r+0x1d6>
 8003d26:	9b03      	ldr	r3, [sp, #12]
 8003d28:	3307      	adds	r3, #7
 8003d2a:	f023 0307 	bic.w	r3, r3, #7
 8003d2e:	3308      	adds	r3, #8
 8003d30:	9303      	str	r3, [sp, #12]
 8003d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d34:	443b      	add	r3, r7
 8003d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d38:	e76a      	b.n	8003c10 <_vfiprintf_r+0x78>
 8003d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d3e:	460c      	mov	r4, r1
 8003d40:	2001      	movs	r0, #1
 8003d42:	e7a8      	b.n	8003c96 <_vfiprintf_r+0xfe>
 8003d44:	2300      	movs	r3, #0
 8003d46:	3401      	adds	r4, #1
 8003d48:	9305      	str	r3, [sp, #20]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f04f 0c0a 	mov.w	ip, #10
 8003d50:	4620      	mov	r0, r4
 8003d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d56:	3a30      	subs	r2, #48	@ 0x30
 8003d58:	2a09      	cmp	r2, #9
 8003d5a:	d903      	bls.n	8003d64 <_vfiprintf_r+0x1cc>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0c6      	beq.n	8003cee <_vfiprintf_r+0x156>
 8003d60:	9105      	str	r1, [sp, #20]
 8003d62:	e7c4      	b.n	8003cee <_vfiprintf_r+0x156>
 8003d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d68:	4604      	mov	r4, r0
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e7f0      	b.n	8003d50 <_vfiprintf_r+0x1b8>
 8003d6e:	ab03      	add	r3, sp, #12
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	462a      	mov	r2, r5
 8003d74:	4b12      	ldr	r3, [pc, #72]	@ (8003dc0 <_vfiprintf_r+0x228>)
 8003d76:	a904      	add	r1, sp, #16
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f3af 8000 	nop.w
 8003d7e:	4607      	mov	r7, r0
 8003d80:	1c78      	adds	r0, r7, #1
 8003d82:	d1d6      	bne.n	8003d32 <_vfiprintf_r+0x19a>
 8003d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d86:	07d9      	lsls	r1, r3, #31
 8003d88:	d405      	bmi.n	8003d96 <_vfiprintf_r+0x1fe>
 8003d8a:	89ab      	ldrh	r3, [r5, #12]
 8003d8c:	059a      	lsls	r2, r3, #22
 8003d8e:	d402      	bmi.n	8003d96 <_vfiprintf_r+0x1fe>
 8003d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d92:	f7ff fe6d 	bl	8003a70 <__retarget_lock_release_recursive>
 8003d96:	89ab      	ldrh	r3, [r5, #12]
 8003d98:	065b      	lsls	r3, r3, #25
 8003d9a:	f53f af1f 	bmi.w	8003bdc <_vfiprintf_r+0x44>
 8003d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003da0:	e71e      	b.n	8003be0 <_vfiprintf_r+0x48>
 8003da2:	ab03      	add	r3, sp, #12
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	462a      	mov	r2, r5
 8003da8:	4b05      	ldr	r3, [pc, #20]	@ (8003dc0 <_vfiprintf_r+0x228>)
 8003daa:	a904      	add	r1, sp, #16
 8003dac:	4630      	mov	r0, r6
 8003dae:	f000 f879 	bl	8003ea4 <_printf_i>
 8003db2:	e7e4      	b.n	8003d7e <_vfiprintf_r+0x1e6>
 8003db4:	08004548 	.word	0x08004548
 8003db8:	08004552 	.word	0x08004552
 8003dbc:	00000000 	.word	0x00000000
 8003dc0:	08003b73 	.word	0x08003b73
 8003dc4:	0800454e 	.word	0x0800454e

08003dc8 <_printf_common>:
 8003dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	4616      	mov	r6, r2
 8003dce:	4698      	mov	r8, r3
 8003dd0:	688a      	ldr	r2, [r1, #8]
 8003dd2:	690b      	ldr	r3, [r1, #16]
 8003dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bfb8      	it	lt
 8003ddc:	4613      	movlt	r3, r2
 8003dde:	6033      	str	r3, [r6, #0]
 8003de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003de4:	4607      	mov	r7, r0
 8003de6:	460c      	mov	r4, r1
 8003de8:	b10a      	cbz	r2, 8003dee <_printf_common+0x26>
 8003dea:	3301      	adds	r3, #1
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	0699      	lsls	r1, r3, #26
 8003df2:	bf42      	ittt	mi
 8003df4:	6833      	ldrmi	r3, [r6, #0]
 8003df6:	3302      	addmi	r3, #2
 8003df8:	6033      	strmi	r3, [r6, #0]
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	f015 0506 	ands.w	r5, r5, #6
 8003e00:	d106      	bne.n	8003e10 <_printf_common+0x48>
 8003e02:	f104 0a19 	add.w	sl, r4, #25
 8003e06:	68e3      	ldr	r3, [r4, #12]
 8003e08:	6832      	ldr	r2, [r6, #0]
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	42ab      	cmp	r3, r5
 8003e0e:	dc26      	bgt.n	8003e5e <_printf_common+0x96>
 8003e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e14:	6822      	ldr	r2, [r4, #0]
 8003e16:	3b00      	subs	r3, #0
 8003e18:	bf18      	it	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	0692      	lsls	r2, r2, #26
 8003e1e:	d42b      	bmi.n	8003e78 <_printf_common+0xb0>
 8003e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e24:	4641      	mov	r1, r8
 8003e26:	4638      	mov	r0, r7
 8003e28:	47c8      	blx	r9
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d01e      	beq.n	8003e6c <_printf_common+0xa4>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	6922      	ldr	r2, [r4, #16]
 8003e32:	f003 0306 	and.w	r3, r3, #6
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	bf02      	ittt	eq
 8003e3a:	68e5      	ldreq	r5, [r4, #12]
 8003e3c:	6833      	ldreq	r3, [r6, #0]
 8003e3e:	1aed      	subeq	r5, r5, r3
 8003e40:	68a3      	ldr	r3, [r4, #8]
 8003e42:	bf0c      	ite	eq
 8003e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e48:	2500      	movne	r5, #0
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	bfc4      	itt	gt
 8003e4e:	1a9b      	subgt	r3, r3, r2
 8003e50:	18ed      	addgt	r5, r5, r3
 8003e52:	2600      	movs	r6, #0
 8003e54:	341a      	adds	r4, #26
 8003e56:	42b5      	cmp	r5, r6
 8003e58:	d11a      	bne.n	8003e90 <_printf_common+0xc8>
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e008      	b.n	8003e70 <_printf_common+0xa8>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4652      	mov	r2, sl
 8003e62:	4641      	mov	r1, r8
 8003e64:	4638      	mov	r0, r7
 8003e66:	47c8      	blx	r9
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d103      	bne.n	8003e74 <_printf_common+0xac>
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e74:	3501      	adds	r5, #1
 8003e76:	e7c6      	b.n	8003e06 <_printf_common+0x3e>
 8003e78:	18e1      	adds	r1, r4, r3
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	2030      	movs	r0, #48	@ 0x30
 8003e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e82:	4422      	add	r2, r4
 8003e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	e7c7      	b.n	8003e20 <_printf_common+0x58>
 8003e90:	2301      	movs	r3, #1
 8003e92:	4622      	mov	r2, r4
 8003e94:	4641      	mov	r1, r8
 8003e96:	4638      	mov	r0, r7
 8003e98:	47c8      	blx	r9
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d0e6      	beq.n	8003e6c <_printf_common+0xa4>
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7d9      	b.n	8003e56 <_printf_common+0x8e>
	...

08003ea4 <_printf_i>:
 8003ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	7e0f      	ldrb	r7, [r1, #24]
 8003eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eac:	2f78      	cmp	r7, #120	@ 0x78
 8003eae:	4691      	mov	r9, r2
 8003eb0:	4680      	mov	r8, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	469a      	mov	sl, r3
 8003eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eba:	d807      	bhi.n	8003ecc <_printf_i+0x28>
 8003ebc:	2f62      	cmp	r7, #98	@ 0x62
 8003ebe:	d80a      	bhi.n	8003ed6 <_printf_i+0x32>
 8003ec0:	2f00      	cmp	r7, #0
 8003ec2:	f000 80d2 	beq.w	800406a <_printf_i+0x1c6>
 8003ec6:	2f58      	cmp	r7, #88	@ 0x58
 8003ec8:	f000 80b9 	beq.w	800403e <_printf_i+0x19a>
 8003ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ed4:	e03a      	b.n	8003f4c <_printf_i+0xa8>
 8003ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eda:	2b15      	cmp	r3, #21
 8003edc:	d8f6      	bhi.n	8003ecc <_printf_i+0x28>
 8003ede:	a101      	add	r1, pc, #4	@ (adr r1, 8003ee4 <_printf_i+0x40>)
 8003ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ee4:	08003f3d 	.word	0x08003f3d
 8003ee8:	08003f51 	.word	0x08003f51
 8003eec:	08003ecd 	.word	0x08003ecd
 8003ef0:	08003ecd 	.word	0x08003ecd
 8003ef4:	08003ecd 	.word	0x08003ecd
 8003ef8:	08003ecd 	.word	0x08003ecd
 8003efc:	08003f51 	.word	0x08003f51
 8003f00:	08003ecd 	.word	0x08003ecd
 8003f04:	08003ecd 	.word	0x08003ecd
 8003f08:	08003ecd 	.word	0x08003ecd
 8003f0c:	08003ecd 	.word	0x08003ecd
 8003f10:	08004051 	.word	0x08004051
 8003f14:	08003f7b 	.word	0x08003f7b
 8003f18:	0800400b 	.word	0x0800400b
 8003f1c:	08003ecd 	.word	0x08003ecd
 8003f20:	08003ecd 	.word	0x08003ecd
 8003f24:	08004073 	.word	0x08004073
 8003f28:	08003ecd 	.word	0x08003ecd
 8003f2c:	08003f7b 	.word	0x08003f7b
 8003f30:	08003ecd 	.word	0x08003ecd
 8003f34:	08003ecd 	.word	0x08003ecd
 8003f38:	08004013 	.word	0x08004013
 8003f3c:	6833      	ldr	r3, [r6, #0]
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6032      	str	r2, [r6, #0]
 8003f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e09d      	b.n	800408c <_printf_i+0x1e8>
 8003f50:	6833      	ldr	r3, [r6, #0]
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	1d19      	adds	r1, r3, #4
 8003f56:	6031      	str	r1, [r6, #0]
 8003f58:	0606      	lsls	r6, r0, #24
 8003f5a:	d501      	bpl.n	8003f60 <_printf_i+0xbc>
 8003f5c:	681d      	ldr	r5, [r3, #0]
 8003f5e:	e003      	b.n	8003f68 <_printf_i+0xc4>
 8003f60:	0645      	lsls	r5, r0, #25
 8003f62:	d5fb      	bpl.n	8003f5c <_printf_i+0xb8>
 8003f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f68:	2d00      	cmp	r5, #0
 8003f6a:	da03      	bge.n	8003f74 <_printf_i+0xd0>
 8003f6c:	232d      	movs	r3, #45	@ 0x2d
 8003f6e:	426d      	negs	r5, r5
 8003f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f74:	4859      	ldr	r0, [pc, #356]	@ (80040dc <_printf_i+0x238>)
 8003f76:	230a      	movs	r3, #10
 8003f78:	e011      	b.n	8003f9e <_printf_i+0xfa>
 8003f7a:	6821      	ldr	r1, [r4, #0]
 8003f7c:	6833      	ldr	r3, [r6, #0]
 8003f7e:	0608      	lsls	r0, r1, #24
 8003f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f84:	d402      	bmi.n	8003f8c <_printf_i+0xe8>
 8003f86:	0649      	lsls	r1, r1, #25
 8003f88:	bf48      	it	mi
 8003f8a:	b2ad      	uxthmi	r5, r5
 8003f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f8e:	4853      	ldr	r0, [pc, #332]	@ (80040dc <_printf_i+0x238>)
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	bf14      	ite	ne
 8003f94:	230a      	movne	r3, #10
 8003f96:	2308      	moveq	r3, #8
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f9e:	6866      	ldr	r6, [r4, #4]
 8003fa0:	60a6      	str	r6, [r4, #8]
 8003fa2:	2e00      	cmp	r6, #0
 8003fa4:	bfa2      	ittt	ge
 8003fa6:	6821      	ldrge	r1, [r4, #0]
 8003fa8:	f021 0104 	bicge.w	r1, r1, #4
 8003fac:	6021      	strge	r1, [r4, #0]
 8003fae:	b90d      	cbnz	r5, 8003fb4 <_printf_i+0x110>
 8003fb0:	2e00      	cmp	r6, #0
 8003fb2:	d04b      	beq.n	800404c <_printf_i+0x1a8>
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fba:	fb03 5711 	mls	r7, r3, r1, r5
 8003fbe:	5dc7      	ldrb	r7, [r0, r7]
 8003fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fc4:	462f      	mov	r7, r5
 8003fc6:	42bb      	cmp	r3, r7
 8003fc8:	460d      	mov	r5, r1
 8003fca:	d9f4      	bls.n	8003fb6 <_printf_i+0x112>
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d10b      	bne.n	8003fe8 <_printf_i+0x144>
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	07df      	lsls	r7, r3, #31
 8003fd4:	d508      	bpl.n	8003fe8 <_printf_i+0x144>
 8003fd6:	6923      	ldr	r3, [r4, #16]
 8003fd8:	6861      	ldr	r1, [r4, #4]
 8003fda:	4299      	cmp	r1, r3
 8003fdc:	bfde      	ittt	le
 8003fde:	2330      	movle	r3, #48	@ 0x30
 8003fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fe4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fe8:	1b92      	subs	r2, r2, r6
 8003fea:	6122      	str	r2, [r4, #16]
 8003fec:	f8cd a000 	str.w	sl, [sp]
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	aa03      	add	r2, sp, #12
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f7ff fee6 	bl	8003dc8 <_printf_common>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d14a      	bne.n	8004096 <_printf_i+0x1f2>
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	b004      	add	sp, #16
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	f043 0320 	orr.w	r3, r3, #32
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	4833      	ldr	r0, [pc, #204]	@ (80040e0 <_printf_i+0x23c>)
 8004014:	2778      	movs	r7, #120	@ 0x78
 8004016:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	6831      	ldr	r1, [r6, #0]
 800401e:	061f      	lsls	r7, r3, #24
 8004020:	f851 5b04 	ldr.w	r5, [r1], #4
 8004024:	d402      	bmi.n	800402c <_printf_i+0x188>
 8004026:	065f      	lsls	r7, r3, #25
 8004028:	bf48      	it	mi
 800402a:	b2ad      	uxthmi	r5, r5
 800402c:	6031      	str	r1, [r6, #0]
 800402e:	07d9      	lsls	r1, r3, #31
 8004030:	bf44      	itt	mi
 8004032:	f043 0320 	orrmi.w	r3, r3, #32
 8004036:	6023      	strmi	r3, [r4, #0]
 8004038:	b11d      	cbz	r5, 8004042 <_printf_i+0x19e>
 800403a:	2310      	movs	r3, #16
 800403c:	e7ac      	b.n	8003f98 <_printf_i+0xf4>
 800403e:	4827      	ldr	r0, [pc, #156]	@ (80040dc <_printf_i+0x238>)
 8004040:	e7e9      	b.n	8004016 <_printf_i+0x172>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	f023 0320 	bic.w	r3, r3, #32
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	e7f6      	b.n	800403a <_printf_i+0x196>
 800404c:	4616      	mov	r6, r2
 800404e:	e7bd      	b.n	8003fcc <_printf_i+0x128>
 8004050:	6833      	ldr	r3, [r6, #0]
 8004052:	6825      	ldr	r5, [r4, #0]
 8004054:	6961      	ldr	r1, [r4, #20]
 8004056:	1d18      	adds	r0, r3, #4
 8004058:	6030      	str	r0, [r6, #0]
 800405a:	062e      	lsls	r6, r5, #24
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	d501      	bpl.n	8004064 <_printf_i+0x1c0>
 8004060:	6019      	str	r1, [r3, #0]
 8004062:	e002      	b.n	800406a <_printf_i+0x1c6>
 8004064:	0668      	lsls	r0, r5, #25
 8004066:	d5fb      	bpl.n	8004060 <_printf_i+0x1bc>
 8004068:	8019      	strh	r1, [r3, #0]
 800406a:	2300      	movs	r3, #0
 800406c:	6123      	str	r3, [r4, #16]
 800406e:	4616      	mov	r6, r2
 8004070:	e7bc      	b.n	8003fec <_printf_i+0x148>
 8004072:	6833      	ldr	r3, [r6, #0]
 8004074:	1d1a      	adds	r2, r3, #4
 8004076:	6032      	str	r2, [r6, #0]
 8004078:	681e      	ldr	r6, [r3, #0]
 800407a:	6862      	ldr	r2, [r4, #4]
 800407c:	2100      	movs	r1, #0
 800407e:	4630      	mov	r0, r6
 8004080:	f7fc f8a6 	bl	80001d0 <memchr>
 8004084:	b108      	cbz	r0, 800408a <_printf_i+0x1e6>
 8004086:	1b80      	subs	r0, r0, r6
 8004088:	6060      	str	r0, [r4, #4]
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	6123      	str	r3, [r4, #16]
 800408e:	2300      	movs	r3, #0
 8004090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004094:	e7aa      	b.n	8003fec <_printf_i+0x148>
 8004096:	6923      	ldr	r3, [r4, #16]
 8004098:	4632      	mov	r2, r6
 800409a:	4649      	mov	r1, r9
 800409c:	4640      	mov	r0, r8
 800409e:	47d0      	blx	sl
 80040a0:	3001      	adds	r0, #1
 80040a2:	d0ad      	beq.n	8004000 <_printf_i+0x15c>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	079b      	lsls	r3, r3, #30
 80040a8:	d413      	bmi.n	80040d2 <_printf_i+0x22e>
 80040aa:	68e0      	ldr	r0, [r4, #12]
 80040ac:	9b03      	ldr	r3, [sp, #12]
 80040ae:	4298      	cmp	r0, r3
 80040b0:	bfb8      	it	lt
 80040b2:	4618      	movlt	r0, r3
 80040b4:	e7a6      	b.n	8004004 <_printf_i+0x160>
 80040b6:	2301      	movs	r3, #1
 80040b8:	4632      	mov	r2, r6
 80040ba:	4649      	mov	r1, r9
 80040bc:	4640      	mov	r0, r8
 80040be:	47d0      	blx	sl
 80040c0:	3001      	adds	r0, #1
 80040c2:	d09d      	beq.n	8004000 <_printf_i+0x15c>
 80040c4:	3501      	adds	r5, #1
 80040c6:	68e3      	ldr	r3, [r4, #12]
 80040c8:	9903      	ldr	r1, [sp, #12]
 80040ca:	1a5b      	subs	r3, r3, r1
 80040cc:	42ab      	cmp	r3, r5
 80040ce:	dcf2      	bgt.n	80040b6 <_printf_i+0x212>
 80040d0:	e7eb      	b.n	80040aa <_printf_i+0x206>
 80040d2:	2500      	movs	r5, #0
 80040d4:	f104 0619 	add.w	r6, r4, #25
 80040d8:	e7f5      	b.n	80040c6 <_printf_i+0x222>
 80040da:	bf00      	nop
 80040dc:	08004559 	.word	0x08004559
 80040e0:	0800456a 	.word	0x0800456a

080040e4 <__sflush_r>:
 80040e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ec:	0716      	lsls	r6, r2, #28
 80040ee:	4605      	mov	r5, r0
 80040f0:	460c      	mov	r4, r1
 80040f2:	d454      	bmi.n	800419e <__sflush_r+0xba>
 80040f4:	684b      	ldr	r3, [r1, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	dc02      	bgt.n	8004100 <__sflush_r+0x1c>
 80040fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	dd48      	ble.n	8004192 <__sflush_r+0xae>
 8004100:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004102:	2e00      	cmp	r6, #0
 8004104:	d045      	beq.n	8004192 <__sflush_r+0xae>
 8004106:	2300      	movs	r3, #0
 8004108:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800410c:	682f      	ldr	r7, [r5, #0]
 800410e:	6a21      	ldr	r1, [r4, #32]
 8004110:	602b      	str	r3, [r5, #0]
 8004112:	d030      	beq.n	8004176 <__sflush_r+0x92>
 8004114:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	0759      	lsls	r1, r3, #29
 800411a:	d505      	bpl.n	8004128 <__sflush_r+0x44>
 800411c:	6863      	ldr	r3, [r4, #4]
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004122:	b10b      	cbz	r3, 8004128 <__sflush_r+0x44>
 8004124:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	2300      	movs	r3, #0
 800412a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800412c:	6a21      	ldr	r1, [r4, #32]
 800412e:	4628      	mov	r0, r5
 8004130:	47b0      	blx	r6
 8004132:	1c43      	adds	r3, r0, #1
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	d106      	bne.n	8004146 <__sflush_r+0x62>
 8004138:	6829      	ldr	r1, [r5, #0]
 800413a:	291d      	cmp	r1, #29
 800413c:	d82b      	bhi.n	8004196 <__sflush_r+0xb2>
 800413e:	4a2a      	ldr	r2, [pc, #168]	@ (80041e8 <__sflush_r+0x104>)
 8004140:	410a      	asrs	r2, r1
 8004142:	07d6      	lsls	r6, r2, #31
 8004144:	d427      	bmi.n	8004196 <__sflush_r+0xb2>
 8004146:	2200      	movs	r2, #0
 8004148:	6062      	str	r2, [r4, #4]
 800414a:	04d9      	lsls	r1, r3, #19
 800414c:	6922      	ldr	r2, [r4, #16]
 800414e:	6022      	str	r2, [r4, #0]
 8004150:	d504      	bpl.n	800415c <__sflush_r+0x78>
 8004152:	1c42      	adds	r2, r0, #1
 8004154:	d101      	bne.n	800415a <__sflush_r+0x76>
 8004156:	682b      	ldr	r3, [r5, #0]
 8004158:	b903      	cbnz	r3, 800415c <__sflush_r+0x78>
 800415a:	6560      	str	r0, [r4, #84]	@ 0x54
 800415c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800415e:	602f      	str	r7, [r5, #0]
 8004160:	b1b9      	cbz	r1, 8004192 <__sflush_r+0xae>
 8004162:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004166:	4299      	cmp	r1, r3
 8004168:	d002      	beq.n	8004170 <__sflush_r+0x8c>
 800416a:	4628      	mov	r0, r5
 800416c:	f7ff fca0 	bl	8003ab0 <_free_r>
 8004170:	2300      	movs	r3, #0
 8004172:	6363      	str	r3, [r4, #52]	@ 0x34
 8004174:	e00d      	b.n	8004192 <__sflush_r+0xae>
 8004176:	2301      	movs	r3, #1
 8004178:	4628      	mov	r0, r5
 800417a:	47b0      	blx	r6
 800417c:	4602      	mov	r2, r0
 800417e:	1c50      	adds	r0, r2, #1
 8004180:	d1c9      	bne.n	8004116 <__sflush_r+0x32>
 8004182:	682b      	ldr	r3, [r5, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0c6      	beq.n	8004116 <__sflush_r+0x32>
 8004188:	2b1d      	cmp	r3, #29
 800418a:	d001      	beq.n	8004190 <__sflush_r+0xac>
 800418c:	2b16      	cmp	r3, #22
 800418e:	d11e      	bne.n	80041ce <__sflush_r+0xea>
 8004190:	602f      	str	r7, [r5, #0]
 8004192:	2000      	movs	r0, #0
 8004194:	e022      	b.n	80041dc <__sflush_r+0xf8>
 8004196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800419a:	b21b      	sxth	r3, r3
 800419c:	e01b      	b.n	80041d6 <__sflush_r+0xf2>
 800419e:	690f      	ldr	r7, [r1, #16]
 80041a0:	2f00      	cmp	r7, #0
 80041a2:	d0f6      	beq.n	8004192 <__sflush_r+0xae>
 80041a4:	0793      	lsls	r3, r2, #30
 80041a6:	680e      	ldr	r6, [r1, #0]
 80041a8:	bf08      	it	eq
 80041aa:	694b      	ldreq	r3, [r1, #20]
 80041ac:	600f      	str	r7, [r1, #0]
 80041ae:	bf18      	it	ne
 80041b0:	2300      	movne	r3, #0
 80041b2:	eba6 0807 	sub.w	r8, r6, r7
 80041b6:	608b      	str	r3, [r1, #8]
 80041b8:	f1b8 0f00 	cmp.w	r8, #0
 80041bc:	dde9      	ble.n	8004192 <__sflush_r+0xae>
 80041be:	6a21      	ldr	r1, [r4, #32]
 80041c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80041c2:	4643      	mov	r3, r8
 80041c4:	463a      	mov	r2, r7
 80041c6:	4628      	mov	r0, r5
 80041c8:	47b0      	blx	r6
 80041ca:	2800      	cmp	r0, #0
 80041cc:	dc08      	bgt.n	80041e0 <__sflush_r+0xfc>
 80041ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041d6:	81a3      	strh	r3, [r4, #12]
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e0:	4407      	add	r7, r0
 80041e2:	eba8 0800 	sub.w	r8, r8, r0
 80041e6:	e7e7      	b.n	80041b8 <__sflush_r+0xd4>
 80041e8:	dfbffffe 	.word	0xdfbffffe

080041ec <_fflush_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	690b      	ldr	r3, [r1, #16]
 80041f0:	4605      	mov	r5, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	b913      	cbnz	r3, 80041fc <_fflush_r+0x10>
 80041f6:	2500      	movs	r5, #0
 80041f8:	4628      	mov	r0, r5
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	b118      	cbz	r0, 8004206 <_fflush_r+0x1a>
 80041fe:	6a03      	ldr	r3, [r0, #32]
 8004200:	b90b      	cbnz	r3, 8004206 <_fflush_r+0x1a>
 8004202:	f7ff f9ff 	bl	8003604 <__sinit>
 8004206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f3      	beq.n	80041f6 <_fflush_r+0xa>
 800420e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004210:	07d0      	lsls	r0, r2, #31
 8004212:	d404      	bmi.n	800421e <_fflush_r+0x32>
 8004214:	0599      	lsls	r1, r3, #22
 8004216:	d402      	bmi.n	800421e <_fflush_r+0x32>
 8004218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800421a:	f7ff fc28 	bl	8003a6e <__retarget_lock_acquire_recursive>
 800421e:	4628      	mov	r0, r5
 8004220:	4621      	mov	r1, r4
 8004222:	f7ff ff5f 	bl	80040e4 <__sflush_r>
 8004226:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004228:	07da      	lsls	r2, r3, #31
 800422a:	4605      	mov	r5, r0
 800422c:	d4e4      	bmi.n	80041f8 <_fflush_r+0xc>
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	059b      	lsls	r3, r3, #22
 8004232:	d4e1      	bmi.n	80041f8 <_fflush_r+0xc>
 8004234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004236:	f7ff fc1b 	bl	8003a70 <__retarget_lock_release_recursive>
 800423a:	e7dd      	b.n	80041f8 <_fflush_r+0xc>

0800423c <fiprintf>:
 800423c:	b40e      	push	{r1, r2, r3}
 800423e:	b503      	push	{r0, r1, lr}
 8004240:	4601      	mov	r1, r0
 8004242:	ab03      	add	r3, sp, #12
 8004244:	4805      	ldr	r0, [pc, #20]	@ (800425c <fiprintf+0x20>)
 8004246:	f853 2b04 	ldr.w	r2, [r3], #4
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	f7ff fca3 	bl	8003b98 <_vfiprintf_r>
 8004252:	b002      	add	sp, #8
 8004254:	f85d eb04 	ldr.w	lr, [sp], #4
 8004258:	b003      	add	sp, #12
 800425a:	4770      	bx	lr
 800425c:	20000018 	.word	0x20000018

08004260 <__swhatbuf_r>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	460c      	mov	r4, r1
 8004264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004268:	2900      	cmp	r1, #0
 800426a:	b096      	sub	sp, #88	@ 0x58
 800426c:	4615      	mov	r5, r2
 800426e:	461e      	mov	r6, r3
 8004270:	da0d      	bge.n	800428e <__swhatbuf_r+0x2e>
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	bf14      	ite	ne
 800427e:	2340      	movne	r3, #64	@ 0x40
 8004280:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004284:	2000      	movs	r0, #0
 8004286:	6031      	str	r1, [r6, #0]
 8004288:	602b      	str	r3, [r5, #0]
 800428a:	b016      	add	sp, #88	@ 0x58
 800428c:	bd70      	pop	{r4, r5, r6, pc}
 800428e:	466a      	mov	r2, sp
 8004290:	f000 f848 	bl	8004324 <_fstat_r>
 8004294:	2800      	cmp	r0, #0
 8004296:	dbec      	blt.n	8004272 <__swhatbuf_r+0x12>
 8004298:	9901      	ldr	r1, [sp, #4]
 800429a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800429e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80042a2:	4259      	negs	r1, r3
 80042a4:	4159      	adcs	r1, r3
 80042a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042aa:	e7eb      	b.n	8004284 <__swhatbuf_r+0x24>

080042ac <__smakebuf_r>:
 80042ac:	898b      	ldrh	r3, [r1, #12]
 80042ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042b0:	079d      	lsls	r5, r3, #30
 80042b2:	4606      	mov	r6, r0
 80042b4:	460c      	mov	r4, r1
 80042b6:	d507      	bpl.n	80042c8 <__smakebuf_r+0x1c>
 80042b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	6123      	str	r3, [r4, #16]
 80042c0:	2301      	movs	r3, #1
 80042c2:	6163      	str	r3, [r4, #20]
 80042c4:	b003      	add	sp, #12
 80042c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c8:	ab01      	add	r3, sp, #4
 80042ca:	466a      	mov	r2, sp
 80042cc:	f7ff ffc8 	bl	8004260 <__swhatbuf_r>
 80042d0:	9f00      	ldr	r7, [sp, #0]
 80042d2:	4605      	mov	r5, r0
 80042d4:	4639      	mov	r1, r7
 80042d6:	4630      	mov	r0, r6
 80042d8:	f7ff f810 	bl	80032fc <_malloc_r>
 80042dc:	b948      	cbnz	r0, 80042f2 <__smakebuf_r+0x46>
 80042de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e2:	059a      	lsls	r2, r3, #22
 80042e4:	d4ee      	bmi.n	80042c4 <__smakebuf_r+0x18>
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	f043 0302 	orr.w	r3, r3, #2
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	e7e2      	b.n	80042b8 <__smakebuf_r+0xc>
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	6020      	str	r0, [r4, #0]
 80042f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	9b01      	ldr	r3, [sp, #4]
 80042fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004302:	b15b      	cbz	r3, 800431c <__smakebuf_r+0x70>
 8004304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004308:	4630      	mov	r0, r6
 800430a:	f000 f81d 	bl	8004348 <_isatty_r>
 800430e:	b128      	cbz	r0, 800431c <__smakebuf_r+0x70>
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	81a3      	strh	r3, [r4, #12]
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	431d      	orrs	r5, r3
 8004320:	81a5      	strh	r5, [r4, #12]
 8004322:	e7cf      	b.n	80042c4 <__smakebuf_r+0x18>

08004324 <_fstat_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4d07      	ldr	r5, [pc, #28]	@ (8004344 <_fstat_r+0x20>)
 8004328:	2300      	movs	r3, #0
 800432a:	4604      	mov	r4, r0
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	f7fc f9d9 	bl	80006e8 <_fstat>
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	d102      	bne.n	8004340 <_fstat_r+0x1c>
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	b103      	cbz	r3, 8004340 <_fstat_r+0x1c>
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	bd38      	pop	{r3, r4, r5, pc}
 8004342:	bf00      	nop
 8004344:	200005b0 	.word	0x200005b0

08004348 <_isatty_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d06      	ldr	r5, [pc, #24]	@ (8004364 <_isatty_r+0x1c>)
 800434c:	2300      	movs	r3, #0
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	f7fc f9d8 	bl	8000708 <_isatty>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d102      	bne.n	8004362 <_isatty_r+0x1a>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	b103      	cbz	r3, 8004362 <_isatty_r+0x1a>
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	200005b0 	.word	0x200005b0

08004368 <abort>:
 8004368:	b508      	push	{r3, lr}
 800436a:	2006      	movs	r0, #6
 800436c:	f000 f82c 	bl	80043c8 <raise>
 8004370:	2001      	movs	r0, #1
 8004372:	f7fc f969 	bl	8000648 <_exit>

08004376 <_raise_r>:
 8004376:	291f      	cmp	r1, #31
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4605      	mov	r5, r0
 800437c:	460c      	mov	r4, r1
 800437e:	d904      	bls.n	800438a <_raise_r+0x14>
 8004380:	2316      	movs	r3, #22
 8004382:	6003      	str	r3, [r0, #0]
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	bd38      	pop	{r3, r4, r5, pc}
 800438a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800438c:	b112      	cbz	r2, 8004394 <_raise_r+0x1e>
 800438e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004392:	b94b      	cbnz	r3, 80043a8 <_raise_r+0x32>
 8004394:	4628      	mov	r0, r5
 8004396:	f000 f831 	bl	80043fc <_getpid_r>
 800439a:	4622      	mov	r2, r4
 800439c:	4601      	mov	r1, r0
 800439e:	4628      	mov	r0, r5
 80043a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043a4:	f000 b818 	b.w	80043d8 <_kill_r>
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d00a      	beq.n	80043c2 <_raise_r+0x4c>
 80043ac:	1c59      	adds	r1, r3, #1
 80043ae:	d103      	bne.n	80043b8 <_raise_r+0x42>
 80043b0:	2316      	movs	r3, #22
 80043b2:	6003      	str	r3, [r0, #0]
 80043b4:	2001      	movs	r0, #1
 80043b6:	e7e7      	b.n	8004388 <_raise_r+0x12>
 80043b8:	2100      	movs	r1, #0
 80043ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80043be:	4620      	mov	r0, r4
 80043c0:	4798      	blx	r3
 80043c2:	2000      	movs	r0, #0
 80043c4:	e7e0      	b.n	8004388 <_raise_r+0x12>
	...

080043c8 <raise>:
 80043c8:	4b02      	ldr	r3, [pc, #8]	@ (80043d4 <raise+0xc>)
 80043ca:	4601      	mov	r1, r0
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	f7ff bfd2 	b.w	8004376 <_raise_r>
 80043d2:	bf00      	nop
 80043d4:	20000018 	.word	0x20000018

080043d8 <_kill_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4d07      	ldr	r5, [pc, #28]	@ (80043f8 <_kill_r+0x20>)
 80043dc:	2300      	movs	r3, #0
 80043de:	4604      	mov	r4, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	602b      	str	r3, [r5, #0]
 80043e6:	f7fc f91f 	bl	8000628 <_kill>
 80043ea:	1c43      	adds	r3, r0, #1
 80043ec:	d102      	bne.n	80043f4 <_kill_r+0x1c>
 80043ee:	682b      	ldr	r3, [r5, #0]
 80043f0:	b103      	cbz	r3, 80043f4 <_kill_r+0x1c>
 80043f2:	6023      	str	r3, [r4, #0]
 80043f4:	bd38      	pop	{r3, r4, r5, pc}
 80043f6:	bf00      	nop
 80043f8:	200005b0 	.word	0x200005b0

080043fc <_getpid_r>:
 80043fc:	f7fc b90c 	b.w	8000618 <_getpid>

08004400 <_gettimeofday>:
 8004400:	4b02      	ldr	r3, [pc, #8]	@ (800440c <_gettimeofday+0xc>)
 8004402:	2258      	movs	r2, #88	@ 0x58
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	f04f 30ff 	mov.w	r0, #4294967295
 800440a:	4770      	bx	lr
 800440c:	200005b0 	.word	0x200005b0

08004410 <_init>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	bf00      	nop
 8004414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004416:	bc08      	pop	{r3}
 8004418:	469e      	mov	lr, r3
 800441a:	4770      	bx	lr

0800441c <_fini>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	bf00      	nop
 8004420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004422:	bc08      	pop	{r3}
 8004424:	469e      	mov	lr, r3
 8004426:	4770      	bx	lr
